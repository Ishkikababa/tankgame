package TankGame;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.lang.Math;
import java.util.ArrayList;

public class Game extends KeyAdapter implements GlobalConst, ActionListener
{
	private JFrame gameFrame;
	private GamePanel battlePanel;
	private Timer timer;
	
	private boolean pressedLeft = false, pressedRight = false, pressedUp = false, pressedDown = false, 
						 pressedA = false, pressedD = false, pressedW = false, pressedS = false,
						 pressedSpace = false, pressedZero = false,
				       redFired = false, greenFired = false,
				       paused = false;
	
	private boolean controlKeyPressed = false;

	public static void main(String[] args)
	{
		new Game();
	}

	// Constructor
	public Game()
	{
		gameFrame = new JFrame();
		battlePanel = new GamePanel();
		gameFrame.getContentPane().add(battlePanel);

		gameFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		gameFrame.setSize(FIELD_WIDTH, FIELD_HEIGHT);
		gameFrame.setTitle("Tank Game");
		gameFrame.setLocationRelativeTo(null);
		gameFrame.setResizable(false);
		gameFrame.setFocusable(true);
		
		gameFrame.getContentPane().setBackground(Color.WHITE);

		// Set up before, changed to tanks
		//setUpShooter();
		//setUpAliens();
		
		setUpTanks();
		setUpWalls();

		gameFrame.addKeyListener(this);
		gameFrame.setVisible(true);

		// Set (and start) a new Swing Timer to fire every 'TIMER_SPEED' milliseconds,
		//  after an initial delay of 'TIMER_DELAY' milliseconds; this Timer, along
		//  with the distance (number of pixels) that the aliens, missiles, and shooter
		//  move with each cycle, controls how fast the objects move on the playing
		//  field; note that if adding a "pause/unpause" feature to this game, the
		//  value of the 'TIMER_DELAY' constant should probably be set to zero
		timer = new Timer(TIMER_SPEED, this);
		timer.setInitialDelay(TIMER_DELAY);
		timer.start();
	}

	public void setUpWalls()
	{
		walls.clear();
		//4 sides
		walls.add(new Wall(0, 0, FIELD_WIDTH, 10));
		walls.add(new Wall(0, 0, 10, FIELD_HEIGHT));
		walls.add(new Wall(0, FIELD_HEIGHT - 35, FIELD_WIDTH, 10));
		walls.add(new Wall(FIELD_WIDTH - 15, 0, 10, FIELD_HEIGHT));
		
		//red top horizontal wall
		walls.add(new Wall(0, 100, 280, 10));
		
		//up right vertical wall
		walls.add(new Wall(360, 0, 10, 200));
		
		//"the half swastika"
		walls.add(new Wall(480, 80, 10, 220));
		walls.add(new Wall(200, 290, 294, 10));
		
		//upper left box
		walls.add(new Wall(84, 200, 196, 10));
		
		int l = walls.size(), buffer = 9;
		System.out.println(l);
		for (int i=l-1;i>=0;i--)
		{
			Wall temp = walls.get(i);
			walls.remove(i);
			
			if (temp.getOrientation().equals("V"))
			{
				walls.add(new Wall(temp.getX(), temp.getY(), temp.getWidth(), buffer));
				walls.add(new Wall(temp.getX(), temp.getY() + temp.getHeight() - buffer, temp.getWidth(), buffer));
				
			}
			else if (temp.getOrientation().equals("H"))
			{
				walls.add(new Wall(temp.getX(), temp.getY(), buffer, temp.getHeight()));
				walls.add(new Wall(temp.getX() + temp.getWidth() - buffer, temp.getY(), buffer, temp.getHeight()));
			}
			else
			{
				System.out.println();
			}
		}
	}
	
	public void setUpTanks()
	{
		gameVar.redTankX = 24;
		gameVar.redTankY = 300;//24;
		//gameVar.greenTankX = FIELD_WIDTH - 50 - gameVar.greenTankImage.getWidth(null);
		//gameVar.greenTankY = FIELD_HEIGHT - 50 - gameVar.greenTankImage.getHeight(null);
		gameVar.greenTankX = 500;
		gameVar.greenTankY = 500;
	}

	public void actionPerformed(ActionEvent e)
	{		
		if (paused)
			return;
		
		//end game?
		
		checkTankMovement();
		
		if (pressedSpace && redFired == false && gameVar.redBulletsLeft > 0)
		{
			shoot("red");
			gameVar.redBulletsLeft--;
		}
		if (pressedZero && greenFired == false && gameVar.greenBulletsLeft > 0)
		{
			shoot("green");
			gameVar.greenBulletsLeft--;
		}

		moveBullets();
		
		// If the player has pressed the space bar, launch a missile; the variable
		//  'missileFired' prevents the player from holding down the space bar to
		//  fire missiles continuously (by forcing the player to release the space
		//  bar between firings)

		// Redraw/Update the playing field
		battlePanel.repaint();
		checkCollisions();
	}

	public void checkTankMovement()
	{
		// all functions should pass/check "tank color"
		// move red tank
		if (pressedW)// && inBounds("red"))
		{
			moveTank("red", "w", gameVar.tankSpeed);
		}		
		if (pressedS)// && inBounds("red"))
		{
			moveTank("red", "s", gameVar.tankSpeed);				
		}
		if (pressedD)// && inBounds("red"))
		{
			moveTank("red", "d", gameVar.tankSpeed);
		}
		if (pressedA)// && inBounds("red"))
		{
			moveTank("red", "a", gameVar.tankSpeed);
		}
		
		//move green tank
		if (pressedUp)
		{
			moveTank("green", "up", gameVar.tankSpeed);
		}
		if (pressedDown)
		{
			moveTank("green", "down", gameVar.tankSpeed);
		}
		if (pressedLeft)
		{
			moveTank("green", "left", gameVar.tankSpeed);
		}
		if (pressedRight)
		{
			moveTank("green", "right", gameVar.tankSpeed);
		}
	}
	
	public void moveBullets()
	{
		for (int i = 0; i< bullets.size(); i++)
		{
			//System.out.println(bullets.size());
			Bullet bullet = bullets.get(i);
			if (bullet.isDead())
			{
				if (bullet.getOwner().equals("red"))
				{
					gameVar.redBulletsLeft++;
				}
				else if (bullet.getOwner().equals("green"))
				{
					gameVar.greenBulletsLeft++;
				}
				
				bullets.remove(i);
			}
			else
			{
				bullet.moveBullet();
			}
		}
	}
	
	public Wall collidesWithWalls(myShape shape)
	{
		gameVar.badWall = null;
		for (int i=0;i<walls.size();i++)
		{
			if (shapeCollision(walls.get(i).getShape(), shape))
			{
				gameVar.badWall = walls.get(i).getShape();
				return walls.get(i);
			}
		}
		return null;
		
		//		
		//return the walls colliding/null and CHECK IF IT IS NULL YOU kind and thoughtful dudebro
		//
	}
	
	public void moveTank(String t, String d, double speed)
	{
		int buffer = 4;
		double angleBuffer = 0;
		myShape temp;
		Vector2D c;
		double smoothBounceSpeed = 2;
		
		if (t.equals("red"))
		{
			double rcos = Math.cos(Math.toRadians(gameVar.redDirection)) * speed;
			double rsin = Math.sin(Math.toRadians(gameVar.redDirection)) * speed;
			temp = new myShape(gameVar.rur, gameVar.rul, gameVar.rdr, gameVar.rdl);
			c = findCenter(temp);
			gameVar.tankTemp = temp;
			gameVar.tempCenter = c;
			double tempAngle = gameVar.redDirection/180 + gameVar.directionIncrementer + angleBuffer;
			switch(d)
			{
				case "w":
					for (int i=0;i<4;i++) {
						temp.getVector2D(i).setX(temp.getVector2D(i).getX() + rcos * buffer);
						temp.getVector2D(i).setY(temp.getVector2D(i).getY() + rsin * buffer);
					};
					
					if (collidesWithWalls(temp) == null)
					{
						gameVar.redTankX += rcos;
						gameVar.redTankY += rsin;
					}
					else if (collidesWithWalls(temp) != null)
					{
						try
						{
						if (0 < gameVar.redDirection && gameVar.redDirection < 90 ||
							 270 > gameVar.redDirection && gameVar.redDirection > 180)
						{
							if (collidesWithWalls(temp).getOrientation().equals("H"))
							{
								moveTank("red", "s", smoothBounceSpeed);
								moveTank("red", "a", smoothBounceSpeed);
							}
							else
							{
								moveTank("red", "s", smoothBounceSpeed);
								moveTank("red", "d", smoothBounceSpeed);
							}
						}
						else if (gameVar.redDirection > 270 || 180 > gameVar.redDirection && gameVar.redDirection > 90)
						{
							if (collidesWithWalls(temp).getOrientation().equals("H"))
							{
								moveTank("red", "s", smoothBounceSpeed);
								moveTank("red", "d", smoothBounceSpeed);
							}
							else
							{
								moveTank("red", "s", smoothBounceSpeed);
								moveTank("red", "a", smoothBounceSpeed);
							}
						}
						}
						catch(Error e)
						{
							while (collidesWithWalls(temp) != null)
							{
								for (int i=0;i<4;i++)
								{
									temp.getVector2D(i).setX(temp.getVector2D(i).getX() + rcos * buffer);
									temp.getVector2D(i).setY(temp.getVector2D(i).getY() + rsin * buffer);
								}
								gameVar.redTankX -= rcos;
								gameVar.redTankY -= rsin;
							}
						}
					}
					break; 
				case "s":
					for (int i=0;i<4;i++) {
						temp.getVector2D(i).setX(temp.getVector2D(i).getX() - rcos * buffer);
						temp.getVector2D(i).setY(temp.getVector2D(i).getY() - rsin * buffer);
					};
					
					if (collidesWithWalls(temp) == null)
					{
						gameVar.redTankX -= rcos;
						gameVar.redTankY -= rsin;
					}
					else if (collidesWithWalls(temp) != null)
					{
						try
						{
						if (0 < gameVar.redDirection && gameVar.redDirection < 90 ||
							 270 > gameVar.redDirection && gameVar.redDirection > 180)
						{
							if (collidesWithWalls(temp).getOrientation().equals("H"))
							{
								moveTank("red", "w", smoothBounceSpeed);
								moveTank("red", "a", smoothBounceSpeed);
							}
							else
							{
								moveTank("red", "w", smoothBounceSpeed);
								moveTank("red", "d", smoothBounceSpeed);
							}
						}
						else if (gameVar.redDirection > 270 || 180 > gameVar.redDirection && gameVar.redDirection > 90)
						{
							if (collidesWithWalls(temp).getOrientation().equals("H"))
							{
								moveTank("red", "w", smoothBounceSpeed);
								moveTank("red", "d", smoothBounceSpeed);
							}
							else
							{
								moveTank("red", "w", smoothBounceSpeed);
								moveTank("red", "a", smoothBounceSpeed);
							}
						}
						}
						catch(Error e)
						{
							while(collidesWithWalls(temp) != null)
							{
								for (int i=0;i<4;i++) {
									temp.getVector2D(i).setX(temp.getVector2D(i).getX() - rcos * buffer);
									temp.getVector2D(i).setY(temp.getVector2D(i).getY() - rsin * buffer);
								};
								gameVar.redTankX += rcos;
								gameVar.redTankY += rsin;
							}
						}
					}
					break; 
				case "a":
					for (int i=0;i<4;i++)
					{
						//wtf /180?
						temp.getVector2D(i).setPoint(rotatePoint(temp.getVector2D(i), c, Math.toRadians(-tempAngle)));
					}
					if (collidesWithWalls(temp) == null)
					{
						gameVar.redDirection -= gameVar.directionIncrementer;
					}
					else
					{
						c = findClosestCorner(temp, collidesWithWalls(temp));
						if (c == null)
						{
							return;
						}
						for (int i=0;i<4;i++)
						{
							temp.getVector2D(i).setPoint(rotatePoint(temp.getVector2D(i), c, Math.toRadians(-tempAngle)));
							if (collidesWithWalls(temp) == null)
							{
								gameVar.redDirection -= gameVar.directionIncrementer;
								System.out.println("ok");
							}
						}
					}
					break;
				case "d":
					for (int i=0;i<4;i++)
					{
						temp.getVector2D(i).setPoint(rotatePoint(temp.getVector2D(i), c, Math.toRadians(tempAngle)));
					}
					if (collidesWithWalls(temp) == null)
					{
						gameVar.redDirection += gameVar.directionIncrementer;
					}
					break;
			}
			if (gameVar.redDirection > 360) gameVar.redDirection = 0;
			if (gameVar.redDirection < 0)	gameVar.redDirection = 360;
		}
		if (t.equals("green"))
		{
			double gcos = Math.cos(Math.toRadians(gameVar.greenDirection)) * speed;
			double gsin = Math.sin(Math.toRadians(gameVar.greenDirection)) * speed;
			temp = new myShape(gameVar.gur, gameVar.gul, gameVar.gdr, gameVar.gdl);
			c = findCenter(temp);
			double tempAngle = gameVar.greenDirection/180 + gameVar.directionIncrementer + angleBuffer;
			
			switch(d)
			{
				case "up":
					for (int i=0;i<4;i++) {
						temp.getVector2D(i).setX(temp.getVector2D(i).getX() + gcos * buffer);
						temp.getVector2D(i).setY(temp.getVector2D(i).getY() + gsin * buffer);
					};
					
					if (!shapeCollision(gameVar.redTankShape, temp) && collidesWithWalls(temp) == null)
					{
						gameVar.greenTankX += gcos;
						gameVar.greenTankY += gsin;
					}
					break; 
				case "down":
					for (int i=0;i<4;i++) {
						temp.getVector2D(i).setX(temp.getVector2D(i).getX() - gcos * buffer);
						temp.getVector2D(i).setY(temp.getVector2D(i).getY() - gsin * buffer);
					};
					
					if (!shapeCollision(gameVar.redTankShape, temp) && collidesWithWalls(temp) == null)
					{
						gameVar.greenTankX -= gcos;
						gameVar.greenTankY -= gsin;
					}
					break;
				case "left":
					for (int i=0;i<4;i++)
					{
						temp.getVector2D(i).setPoint(rotatePoint(temp.getVector2D(i), c, Math.toRadians(tempAngle)));
					}
					if (!shapeCollision(temp, gameVar.redTankShape) && collidesWithWalls(temp) == null)
					{
						gameVar.greenDirection -= gameVar.directionIncrementer;
					}
					break;
				case "right":
					for (int i=0;i<4;i++)
					{
						temp.getVector2D(i).setPoint(rotatePoint(temp.getVector2D(i), c, Math.toRadians(tempAngle)));
					}
					if (!shapeCollision(temp, gameVar.redTankShape) && collidesWithWalls(temp) == null)
					{
						gameVar.greenDirection += gameVar.directionIncrementer;
					}
			}
			if (gameVar.greenDirection > 360) gameVar.greenDirection = 0;
			if (gameVar.greenDirection < 0) gameVar.greenDirection = 360;
		}
	}
	
	public Vector2D findClosestCorner(myShape shape, Wall wall)
	{
		//return the corner of the first shape closest to the wall (second shape)
		for (int i=0;i<4;i++)
		{
			//check collisions MVCC style for each vertex;
			Vector2D temp = shape.getVector2D(i);
			if (wall.getX() < temp.getX() && temp.getX() < wall.getX() + wall.getWidth() &&
				 wall.getY() < temp.getY() && temp.getY() < wall.getY() + wall.getHeight())
			{
				return temp;
			}
		}
		return null;
	}
	
	public Vector2D findCenter(myShape shape)
	{
		double minX, maxX, minY, maxY, cx, cy;
		
		minX = Math.min(shape.getVector2D(0).getX(), Math.min(shape.getVector2D(1).getX(), Math.min(shape.getVector2D(2).getX(), shape.getVector2D(3).getX())));
		maxX = Math.max(shape.getVector2D(0).getX(), Math.max(shape.getVector2D(1).getX(), Math.max(shape.getVector2D(2).getX(), shape.getVector2D(3).getX())));
		
		minY = Math.min(shape.getVector2D(0).getY(), Math.min(shape.getVector2D(1).getY(), Math.min(shape.getVector2D(2).getY(), shape.getVector2D(3).getY())));
		maxY = Math.max(shape.getVector2D(0).getY(), Math.max(shape.getVector2D(1).getY(), Math.max(shape.getVector2D(2).getY(), shape.getVector2D(3).getY())));
		
		cx = (minX + maxX)/2;
		cy = (minY + maxY)/2;
		
		return new Vector2D(cx, cy);
	}
	
	public void shoot(String t)
	{
		double extra = 1.2;
		if (t.equals("red"))
		{
			int rcx = (int) gameVar.redTankX + (gameVar.redTankImage.getWidth()/2);
			int rcy = (int) gameVar.redTankY + (gameVar.redTankImage.getHeight()/2);
			
			bullets.add(new Bullet(rcx + Math.cos(Math.toRadians(gameVar.redDirection)) * (gameVar.redTankImage.getWidth()/2) * extra,
										  rcy + Math.sin(Math.toRadians(gameVar.redDirection)) * (gameVar.redTankImage.getWidth()/2) * extra, 
										  gameVar.redDirection, "red"));
//			System.out.println("y: " + (rcy + Math.sin(Math.toRadians(gameVar.redDirection)) * (gameVar.redTankImage.getWidth()/2)));
//			System.out.println("y2: " + bullets.get(0).getY());
			redFired = true;
		}
		if (t.equals("green"))
		{
			int gcx = (int) gameVar.greenTankX + (gameVar.greenTankImage.getWidth(null)/2);
			int gcy = (int) gameVar.greenTankY + (gameVar.greenTankImage.getHeight(null)/2);
			
			bullets.add(new Bullet(gcx + Math.cos(Math.toRadians(gameVar.greenDirection)) * (gameVar.greenTankImage.getWidth(null)/2) * extra,
										  gcy + Math.sin(Math.toRadians(gameVar.greenDirection)) * (gameVar.greenTankImage.getWidth(null)/2) * extra, 
										  gameVar.greenDirection, "green"));
			greenFired = true;
		}
	}

	public void checkCollisions()
	{
		findCorners();
		//shapeCollision();
	
		gameVar.redTankShape = new myShape(gameVar.rur, gameVar.rul, gameVar.rdr, gameVar.rdl);
		gameVar.greenTankShape = new myShape(gameVar.gur, gameVar.gul, gameVar.gdr, gameVar.gdl);
		
		for (int i=0;i<bullets.size();i++)
		{
			Bullet bullet = bullets.get(i);
			myShape bulletShape = bullet.getShape();
			
			if (shapeCollision(bulletShape, gameVar.redTankShape))
			{
				bullet.setDead(true);
				gameVar.winner = "GREEN TANK";
			}
			
			if (shapeCollision(bulletShape, gameVar.greenTankShape))
			{
				bullet.setDead(true);
				gameVar.winner = "RED TANK";
				//
			}
			
			for (Wall wall: walls)
			{
				if (shapeCollision(wall.getShape(), bulletShape))
				{
					bullet.bounce(wall.getOrientation());
				}
			}
		}
		
		// The 'try-catch' exception trapping is needed to prevent an error from
		//  occurring when an element is removed from the 'aliens' and 'missiles'
		//  ArrayLists, causing the 'for' loops to end prematurely 
		
		// If all of the aliens have been destroyed, the game is over, so stop
		//  the Timer and remove any remaining missiles from the playing field 
		/*
		if (aliens.size() == 0)
		{
			timer.stop();
			missiles.removeAll(missiles);
			gameVar.gameOver = true;
		}
		*/
	}
	
	public void findCorners()
	{
		//red
		double rcx = gameVar.redTankX + (gameVar.redTankImage.getWidth()/2);
		double rcy = gameVar.redTankY + (gameVar.redTankImage.getHeight()/2);
		
		double rx =  gameVar.redTankX;
		double ry =  gameVar.redTankY;
		double rw =  gameVar.redTankImage.getWidth();
		double rh =  gameVar.redTankImage.getHeight();
		double ra =  Math.toRadians(gameVar.redDirection);
		
		gameVar.rul = new Vector2D(rx, ry);
		gameVar.rur = new Vector2D(rx + rw, ry);
		gameVar.rdr = new Vector2D(rx + rw, ry + rh);
		gameVar.rdl = new Vector2D(rx, ry + rh);
		
		gameVar.redPoints.clear();
		
		gameVar.redPoints.add(gameVar.rul);
		gameVar.redPoints.add(gameVar.rur);
		gameVar.redPoints.add(gameVar.rdr);
		gameVar.redPoints.add(gameVar.rdl);
		
		Vector2D rcenter = new Vector2D(rcx, rcy);
		
		for (int i = 0; i < gameVar.redPoints.size(); i++)
		{
			//rotatePoint(gameVar.redPoints.get(i), rcenter, ra);
			gameVar.redPoints.get(i).setPoint(rotatePoint(gameVar.redPoints.get(i), rcenter, ra));
		}
		
		//green
		double gcx = gameVar.greenTankX + (gameVar.greenTankImage.getWidth(null)/2);
		double gcy = gameVar.greenTankY + (gameVar.greenTankImage.getHeight(null)/2);
		
		double gx =  gameVar.greenTankX;
		double gy =  gameVar.greenTankY;
		double gw =  gameVar.greenTankImage.getWidth(null);
		double gh =  gameVar.greenTankImage.getHeight(null);
		double ga =  Math.toRadians(gameVar.greenDirection);
		
		gameVar.gul = new Vector2D(gx, gy);
		gameVar.gur = new Vector2D(gx + gw, gy);
		gameVar.gdl = new Vector2D(gx, gy + gh);
		gameVar.gdr = new Vector2D(gx + gw, gy + gh);
		
		gameVar.greenPoints.clear();
		
		gameVar.greenPoints.add(gameVar.gul);
		gameVar.greenPoints.add(gameVar.gur);
		gameVar.greenPoints.add(gameVar.gdl);
		gameVar.greenPoints.add(gameVar.gdr);
		
		Vector2D gcenter = new Vector2D(gcx, gcy);
		
		for (int i = 0; i < gameVar.greenPoints.size(); i++)
		{
			gameVar.greenPoints.get(i).setPoint(rotatePoint(gameVar.greenPoints.get(i), gcenter, ga));
		}
	}
	
	public Vector2D rotatePoint(Vector2D point, Vector2D center, double angle)
	{
		double tempX, tempY, newX, newY;
		
		tempX = point.getX() - center.getX();
		tempY = point.getY() - center.getY();
		
		newX = tempX*Math.cos(angle) - tempY*Math.sin(angle);
		newY = tempX*Math.sin(angle) + tempY*Math.cos(angle);
		
		point.setX(newX + center.getX());
		point.setY(newY + center.getY());
		
		return new Vector2D(newX + center.getX(), newY + center.getY());
	}
	
	boolean shapeCollision(myShape a, myShape b)
	{
	    for (int x=0; x<2; x++)
	    {
	        myShape polygon = (x==0) ? a : b;
	       
	        for (int i1=0; i1<4; i1++)
	        {
	            int   i2 = (i1 + 1) % 4;
	            Vector2D p1 = polygon.getVector2D(i1);
	            Vector2D p2 = polygon.getVector2D(i2);
	           
	            Vector2D normal = new Vector2D(p2.getY() - p1.getY(), p1.getX() - p2.getX());
	           
	            double minA = Double.MAX_VALUE;
	            double maxA = Double.MIN_VALUE;
	           
	            for (int j = 0; j < 4; j++)
	            {
	            	Vector2D point = a.getVector2D(j);
	               double projected = normal.getX() * point.getX() + normal.getY() * point.getY();
	               
	               if (projected < minA)
	                   minA = projected;
	               if (projected > maxA)
	                   maxA = projected;
	            }
	           
	            double minB = Double.MAX_VALUE;
	            double maxB = Double.MIN_VALUE;
	           
	            for (int j = 0; j < 4; j++)
	            {
	            	Vector2D point = b.getVector2D(j);
	                double projected = normal.getX() * point.getX() + normal.getY() * point.getY();
	               
	                if (projected < minB)
	                    minB = projected;
	                if (projected > maxB)
	                    maxB = projected;
	            }
	           
	            if (maxA < minB || maxB < minA)
	                return false;
	        }
	    }
	   
	    return true;
	}
	
	public void keyPressed(KeyEvent event)
	{
		//65: a
		//68: d
		//83: s
		//87: w
		
		//47: fZero
		
		int key = event.getKeyCode();

		if (key == KeyEvent.VK_CONTROL) // CONTROL key
			controlKeyPressed = true;

		if ((key == 88) && (controlKeyPressed)) // CONTROL + X
		{
			gameFrame.dispose();
			System.exit(0);
		}
		
		//red controls wasd, green arrows
		
		switch(key)
		{
			case 65:
				pressedA = true;
				break;
			case 68:
				pressedD = true;
				break;
			case 83:
				pressedS = true;
				break;
			case 87:
				pressedW = true;
				break;
			case KeyEvent.VK_UP:
				pressedUp = true;
				break;
			case KeyEvent.VK_DOWN:
				pressedDown = true;
				break;
			case KeyEvent.VK_LEFT:
				pressedLeft = true;
				break;
			case KeyEvent.VK_RIGHT:
				pressedRight = true;
				break;
			case KeyEvent.VK_SPACE:
				pressedSpace = true;
				break;
			case KeyEvent.VK_NUMPAD0:
				//47
				pressedZero = true;
				break;
		}
	}
	
	public void keyReleased(KeyEvent event)
	{
		int key = event.getKeyCode();

		if (key == KeyEvent.VK_CONTROL) // CONTROL key
			controlKeyPressed = false;
		
		switch(key)
		{
			case 65:
				pressedA = false;
				break;
			case 68:
				pressedD = false;
				break;
			case 83:
				pressedS = false;
				break;
			case 87:
				pressedW = false;
				break;
			case KeyEvent.VK_UP:
				pressedUp = false;
				break;
			case KeyEvent.VK_DOWN:
				pressedDown = false;
				break;
			case KeyEvent.VK_LEFT:
				pressedLeft = false;
				break;
			case KeyEvent.VK_RIGHT:
				pressedRight = false;
				break;
			case KeyEvent.VK_SPACE:
				pressedSpace = false;
				redFired = false;
			case KeyEvent.VK_NUMPAD0:
				pressedZero = false;
				greenFired = false;
				break;
			case 27:
				paused = !paused;
				break;
		}
	}
}