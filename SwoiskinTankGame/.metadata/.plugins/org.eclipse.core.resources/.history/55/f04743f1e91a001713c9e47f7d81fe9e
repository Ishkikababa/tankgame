package TankGame;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.lang.Math;
import java.util.ArrayList;
import java.util.Collections;
import java.util.ConcurrentModificationException;
import java.util.concurrent.TimeUnit;

/*
to-do list:
	X make score board for any number of tanks
	X draw orange and blue tanks
	X draw death images
	X fix background color for field/scoreboard (USE CUSTOM RGB COLORS)
	make start screen
		play before match starts
		determines which tanks are in the game (>=2)
	???
	profit
*/

public class Game extends KeyAdapter implements GlobalConst, ActionListener
{
	private JFrame gameFrame;
	private GamePanel battlePanel;
	private Timer timer;

	public static void main(String[] args)
	{
		new Game();
	}

	// Constructor
	public Game()
	{
		gameFrame = new JFrame();
		battlePanel = new GamePanel();
		gameFrame.getContentPane().add(battlePanel);

		gameFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		gameFrame.setSize(vars.fieldWidth + 16, vars.fieldHeight + 16); // 16 for weird jframe buffer
		gameFrame.setTitle("Definitely Not Tank Trouble");
		gameFrame.setLocationRelativeTo(null);
		gameFrame.setResizable(false);
		gameFrame.setFocusable(true);
		
		gameFrame.addKeyListener(this);
		gameFrame.setVisible(true);

		// Set (and start) a new Swing Timer to fire every 'TIMER_SPEED' milliseconds,
		//  after an initial delay of 'TIMER_DELAY' milliseconds; this Timer, along
		//  with the distance (number of pixels) that the aliens, missiles, and shooter
		//  move with each cycle, controls how fast the objects move on the playing
		//  field; note that if adding a "pause/unpause" feature to this game, the
		//  value of the 'TIMER_DELAY' constant should probably be set to zero
		timer = new Timer(TIMER_SPEED, this);
		timer.setInitialDelay(TIMER_DELAY);
		timer.start();
	}
	
	public void start()
	{
		makeMaze();
		setUpTanks();
		resetNumbers();
		resetPowerups();
	}
	
	public void reset()
	{
		makeMaze();
		resetTanks();
		resetNumbers();
		resetPowerups();
	}
	
	public void resetTanks()
	{
		int w = vars.fieldWidth/NODE_LENGTH;
		int h = vars.fieldHeight/NODE_LENGTH;
		
		ArrayList<Vector2D> spots = new ArrayList<Vector2D>();
		
		for (int i=0;i<w-1;i++)
			for (int j=0;j<h-1;j++)
				spots.add(new Vector2D(i * NODE_LENGTH, j * NODE_LENGTH));
		
		Collections.shuffle(spots);
		
		int c = 0;
		for (Tank t : vars.tanks)
		{
			Vector2D spot = spots.get(c);
			c++;
			t.setX(spot.getX() + NODE_LENGTH/2 - t.image().getWidth()/2);
			t.setY(spot.getY() + NODE_LENGTH/2 - t.image().getHeight()/2);
			t.setDirection(rand(0, 360));
			
			t.setHasFired(false);
			t.setDead(false);
		}
	}
	
	public void resetPowerups()
	{
		powerups.clear();
		for (Tank t : vars.tanks)
			t.clearPowerups();
		vars.powerupCooldown = vars.powerupSpawnRate;
	}
	
	public void resetNumbers()
	{
		bullets.clear();
		
		vars.winTextTime = 0;
		vars.winner = "";
	}
	
	public void setUpTanks()
	{
		vars.tanks.clear();
	
		vars.redTank = new Tank(0, 0, 0, "RED");
		vars.tanks.add(vars.redTank);
		
		vars.greenTank = new Tank(0, 0, 0, "GREEN");
		vars.tanks.add(vars.greenTank);
		
		vars.orangeTank = new Tank(0, 0, 0, "ORANGE");
		vars.tanks.add(vars.orangeTank);		
		
		vars.blueTank = new Tank(0, 0, 0, "BLUE");
		vars.tanks.add(vars.blueTank);
		
		resetTanks();
	}

	public void actionPerformed(ActionEvent e)
	{
		battlePanel.repaint();
		
		if (vars.paused || vars.startScreenActive)
			return;
		
		if (!vars.gameOn)
		{
			start();
			vars.gameOn = true;
		}
		
		if (vars.winTextTime > 0)
		{
			vars.winTextTime--;
			if (vars.winTextTime < 1)
				reset();
			return;
		}
		
		checkTankMovement();
		
		if (vars.redTank != null && !vars.redTank.isDead() && vars.pressedSpace)
			vars.redTank.shoot();
		
		if (vars.greenTank != null && !vars.greenTank.isDead() && vars.pressedZero)
			vars.greenTank.shoot();
		
		if (vars.orangeTank != null && !vars.orangeTank.isDead() && vars.pressedSemi)
			vars.orangeTank.shoot();
		
		if (vars.blueTank != null && !vars.blueTank.isDead() && vars.pressedEnter)
			vars.blueTank.shoot();
		
		moveBullets();
		
		checkCollisions();
		checkWinners();
		checkPowerups();
		battlePanel.repaint();
	}
	
	public void checkPowerups()
	{
		// checks if a powerup should be spawned
		if (vars.powerupCooldown > 0)
		{
			vars.powerupCooldown--;
			if (vars.powerupCooldown < 1)
			{
				vars.powerupCooldown = vars.powerupSpawnRate;
				spawnPowerup();
			}
		}
		
		for (Tank t : vars.tanks)
			t.updatePowerups();
	}
	
	public void spawnPowerup()
	{
		if (!vars.powerupsOn)
			return;
		Powerup temp;
		do
		{
			int x = (int)(Math.floor(Math.random() * vars.fieldWidth/40)*40) + 15;
			int y = (int)(Math.floor(Math.random() * vars.fieldHeight/40)*40) + 15;
			
			temp = new Powerup(x,y);
			//do-while to not collide with walls or dudes 
		} while(collidesWithWalls(temp.getShape()) != null || shapeCollision(temp.getShape(), vars.redTank.shape()) ||
					shapeCollision(temp.getShape(), vars.greenTank.shape()));
		powerups.add(temp);
	}
	
	public boolean collidesWithPowerups(myShape temp)
	{
		for (Powerup p : powerups)
			if (shapeCollision(temp, p.getShape()))
				return true;
		
		return false;
	}
	
	public void checkTankMovement()
	{
		// move red tank
		if (vars.redTank != null && !vars.redTank.isDead())
		{
			if (vars.pressedW)
				vars.redTank.doMovement("FORWARD");
			if (vars.pressedS)
				vars.redTank.doMovement("BACKWARD");
			if (vars.pressedD)
				vars.redTank.doMovement("RIGHT");
			if (vars.pressedA)
				vars.redTank.doMovement("LEFT");
		}
		
		//move green tank
		if (vars.greenTank != null && !vars.greenTank.isDead())
		{
			if (vars.pressedUp)
				vars.greenTank.doMovement("FORWARD");
			if (vars.pressedDown)
				vars.greenTank.doMovement("BACKWARD");
			if (vars.pressedLeft)
				vars.greenTank.doMovement("LEFT");
			if (vars.pressedRight)
				vars.greenTank.doMovement("RIGHT");
		}
		
		if (vars.orangeTank != null && !vars.orangeTank.isDead())
		{
			if (vars.pressedI)
				vars.orangeTank.doMovement("FORWARD");
			if (vars.pressedK)
				vars.orangeTank.doMovement("BACKWARD");
			if (vars.pressedJ)
				vars.orangeTank.doMovement("LEFT");
			if (vars.pressedL)
				vars.orangeTank.doMovement("RIGHT");
		}		
		
		if (vars.blueTank != null && !vars.blueTank.isDead())
		{
			if (vars.pressed4)
				vars.blueTank.doMovement("FORWARD");
			if (vars.pressed5)
				vars.blueTank.doMovement("BACKWARD");
			if (vars.pressed2)
				vars.blueTank.doMovement("LEFT");
			if (vars.pressed8)
				vars.blueTank.doMovement("RIGHT");
		}
		
	}
	
	public void moveBullets()
	{
		for (int i = 0; i< bullets.size(); i++)
		{
			//System.out.println(bullets.size());
			Bullet bullet = bullets.get(i);
			if (bullet.isDead())
			{
				for (Tank t : vars.tanks)
					if (bullet.getOwner().equals(t.color()))
						t.changeBulletsLeft(1);
				
				bullets.remove(i);
			}
			else
			{
				bullet.moveBullet();
			}
		}
	}
	
	public Wall collidesWithWalls(myShape shape)
	{
		vars.badWall = null;
		for (int i=0;i<walls.size();i++)
		{
			if (shapeCollision(walls.get(i).getShape(), shape))
			{
				vars.badWall = walls.get(i).getShape();
				return walls.get(i);
			}
		}
		return null;
	}		

	public void checkCollisions()
	{		
		for (int i=0;i<bullets.size();i++)
		{
			Bullet bullet = bullets.get(i);
			myShape bulletShape = bullet.getShape();
			
			for (Tank t : vars.tanks)
			{
				if (shapeCollision(bulletShape, t.shape()) && !t.isDead())
				{
					bullet.setDead(true);
					if (!t.hasPower("invuln"))
					{
						t.setDead(true);
					}
				}
			}
			
			Wall tempWall = collidesWithWalls(bullet.getShape());
			if (tempWall != null)
				bullet.bounce(tempWall.getOrientation());
		}
		
		try
		{
			for (Powerup p : powerups)
				for (Tank t: vars.tanks)
					if (shapeCollision(p.getShape(), t.shape()))
					{
						t.addPower(new TankPower(p.getType(), 800));
						powerups.remove(p);
					}
		}
		catch(ConcurrentModificationException e){}
	}
	
	public void checkWinners()
	{
		ArrayList<Tank> living = new ArrayList<Tank>();
		living.clear();
		for (Tank t : vars.tanks)
			if (t.isDead()) 
			{
				t.clearPowerups();
				t.setDirection(0);
			}
			else
				living.add(t);
		
		if (living.size() == 0)
		{
			vars.winner = "NOBODY";
			vars.winTextTime = 400;
		}
		else if (living.size() == 1)
		{
			vars.winner = living.get(0).color() + " TANK";
			living.get(0).addPoint(1);
			vars.winTextTime = 400;
		}			
	}
	
	// http://weblog.jamisbuck.org/2011/1/3/maze-generation-kruskal-s-algorithm
	public void makeMaze()
	{
		walls.clear();
		ArrayList<Wall> tempWalls = new ArrayList<Wall>();
		
		vars.fieldWidth = 300 + 100*rand(0, 4);
		vars.fieldHeight = 300 + 100*rand(0, 4);
		
		Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
		gameFrame.setSize(vars.fieldWidth + 16, vars.fieldHeight + vars.scoreBoardHeight);
		gameFrame.setLocation((int)screenSize.getWidth()/2 - vars.fieldWidth/2,(int) screenSize.getHeight()/2 - (vars.fieldHeight + vars.scoreBoardHeight)/2);
		
		int w = vars.fieldWidth/NODE_LENGTH;
		int h = vars.fieldHeight/NODE_LENGTH;
		int[][] nodes = new int[w][h];
		
		boolean[][] vwalls = new boolean[w][h];
		boolean[][] hwalls = new boolean[w][h];
		
		int index = 0;
		for (int i=0;i<w;i++)
		{
			for (int j=0;j<h;j++)
			{
				//make a temp wall everywhere in between nodes in an array
				vwalls[i][j] = true;
				hwalls[i][j] = true;
				nodes[i][j] = index;
				index++;
			}
		}
		
		while(!mazeDone(nodes))
		{
			int rx = (int)(Math.random()*(w));
			int ry = (int)(Math.random()*(h));
			int rd = (int)(Math.random()*4); // random direction (n,s,e,w) to compare to

			try
			{
				int a = nodes[rx][ry], b = -1;
				switch(rd)
				{
					case 0:
						b = nodes[rx][ry + 1];
						break;
					case 1:
						b = nodes[rx][ry - 1];
						break;
					case 2:
						b = nodes[rx + 1][ry];
						break;
					case 3:
						b = nodes[rx - 1][ry];
						break;
				}
				
				if (a != b)
				{
					
					if (rd == 0)
						hwalls[rx][ry+1] = false;					
					if (rd == 1)
						hwalls[rx][ry] = false;					
					if (rd == 2)
						vwalls[rx+1][ry] = false;					
					if (rd == 3)
						vwalls[rx][ry] = false;
					
					updateBags(nodes, a, b);
				}
				
			}
			catch(Exception e)
			{}
		}
		
		//randomly remove t walls to prevent choke points 
		int r = (int) Math.sqrt(w*h/2); // arbitrary strategery 
		while (r > 0)
		{
			int rx = (int)(Math.random()*(w));
			int ry = (int)(Math.random()*(h));
			
			if (vwalls[rx][ry])
			{
				vwalls[rx][ry] = false;
				hwalls[rx][ry] = false;
				r--;
			}
		}
		
		hwalls[w-1][h-1] = false; //lazy way of fixing bug where the bottom right corner can be cut off
		
		// add temp walls to real walls
		for (int i=0;i<w;i++)
		{
			for (int j=0;j<h;j++)
			{
				if (vwalls[i][j])
					tempWalls.add(new Wall(i*NODE_LENGTH, j*NODE_LENGTH, 10, NODE_LENGTH + 10));
				if (hwalls[i][j])
					tempWalls.add(new Wall(i*NODE_LENGTH, j*NODE_LENGTH, NODE_LENGTH + 10, 10));
			}
		}
		
		int b = 4;// buffer
		//makes corners
		for (int i=0;i<tempWalls.size();i++)
		{
			Wall t = tempWalls.get(i);
			if (t.getOrientation().equals("V"))
			{
				walls.add(new Wall(t.getX(), t.getY(), t.getWidth(), b)); //1
				walls.add(new Wall(t.getX(), t.getY() + t.getHeight() - b, t.getWidth(), b)); //3
				walls.add(new Wall(t.getX(), t.getY() + b, t.getWidth(), t.getHeight()-b)); //2
			}
			if (t.getOrientation().equals("H"))
			{
				walls.add(new Wall(t.getX(), t.getY(), b, t.getHeight())); //1
				walls.add(new Wall(t.getX() + t.getWidth() - b, t.getY(), b, t.getHeight())); //3
				walls.add(new Wall(t.getX() + b, t.getY(), t.getWidth() - b, t.getHeight())); //2
			}
		}
		
		// border
		walls.add(new Wall(0, 0, vars.fieldWidth, 10));
		walls.add(new Wall(0, 0, 10, vars.fieldHeight));
		walls.add(new Wall(0, vars.fieldHeight, vars.fieldWidth + 10, 10));
		walls.add(new Wall(vars.fieldWidth, 0, 10, vars.fieldHeight));
	}
	
	private void updateBags(int[][] n, int old, int nw)
	{		
		for (int i=0;i<n.length;i++)
			for (int j=0;j<n[0].length;j++)
				if (n[i][j] == old)
					n[i][j] = nw;
	}
	
	private boolean mazeDone(int[][] n)
	{
		for (int i=0;i<n.length-1;i++)
			for (int j=0;j<n[0].length-1;j++)
				if (n[i][j] != n[i+1][j] ||
					 n[i][j] != n[i][j+1])
					return false;
		
		return true;
	}
	
	boolean shapeCollision(myShape a, myShape b)
	{
	    for (int x=0; x<2; x++)
	    {
	        myShape polygon = (x==0) ? a : b;
	       
	        for (int i1=0; i1<4; i1++)
	        {
	            int   i2 = (i1 + 1) % 4;
	            Vector2D p1 = polygon.getVector2D(i1);
	            Vector2D p2 = polygon.getVector2D(i2);
	           
	            Vector2D normal = new Vector2D(p2.getY() - p1.getY(), p1.getX() - p2.getX());
	           
	            double minA = Double.MAX_VALUE;
	            double maxA = Double.MIN_VALUE;
	           
	            for (int j = 0; j < 4; j++)
	            {
	            	Vector2D point = a.getVector2D(j);
	               double projected = normal.getX() * point.getX() + normal.getY() * point.getY();
	               
	               if (projected < minA)
	                   minA = projected;
	               if (projected > maxA)
	                   maxA = projected;
	            }
	           
	            double minB = Double.MAX_VALUE;
	            double maxB = Double.MIN_VALUE;
	           
	            for (int j = 0; j < 4; j++)
	            {
	            	Vector2D point = b.getVector2D(j);
	                double projected = normal.getX() * point.getX() + normal.getY() * point.getY();
	               
	                if (projected < minB)
	                    minB = projected;
	                if (projected > maxB)
	                    maxB = projected;
	            }
	           
	            if (maxA < minB || maxB < minA)
	                return false;
	        }
	    }
	   
	    return true;
	}
	
	public int rand(int l, int h)
	{
		//inclusive
		return (int)(Math.random()*((h+1)-l)) +l;
	}
	
	public void keyPressed(KeyEvent event)
	{
		//65: a
		//68: d
		//83: s
		//87: w
		
		//47: fZero
		
		int key = event.getKeyCode();

		if (key == KeyEvent.VK_CONTROL) // CONTROL key
			vars.pressedControlKey = true;

		if ((key == 88) && (vars.pressedControlKey)) // CONTROL + X
		{
			gameFrame.dispose();
			System.exit(0);
		}
		
		if ((key == 78) && (vars.pressedControlKey))
		{
			start();
		}
		
		//red controls wasd, green arrows, orange ijkl;, blue 4258enter
		
		switch(key)
		{
			case 65:
				vars.pressedA = true;
				break;
			case 68:
				vars.pressedD = true;
				break;
			case 83:
				vars.pressedS = true;
				break;
			case 87:
				vars.pressedW = true;
				break;
			case KeyEvent.VK_SPACE:
				vars.pressedSpace = true;
				break;
				
			case KeyEvent.VK_UP:
				vars.pressedUp = true;
				break;
			case KeyEvent.VK_DOWN:
				vars.pressedDown = true;
				break;
			case KeyEvent.VK_LEFT:
				vars.pressedLeft = true;
				break;
			case KeyEvent.VK_RIGHT:
				vars.pressedRight = true;
				break;
			case KeyEvent.VK_NUMPAD0:
				vars.pressedZero = true;
				break;
				
			case 73:
				vars.pressedI = true;
				break;
			case 74:
				vars.pressedJ = true;
				break;
			case 75:
				vars.pressedK = true;
				break;
			case 76: 
				vars.pressedL = true;
				break;
			case 59:
				vars.pressedSemi = true;
				break;
				
			case KeyEvent.VK_NUMPAD4:
				vars.pressed4 = true;
				break;
			case KeyEvent.VK_NUMPAD2:
				vars.pressed2 = true;
				break;
			case KeyEvent.VK_NUMPAD5:
				vars.pressed5 = true;
				break;
			case KeyEvent.VK_NUMPAD8:
				vars.pressed8 = true;
				break;
			case KeyEvent.VK_ENTER:
				vars.pressedEnter = true;
				break;
				
			case 8:
				vars.pressedBackspace = true;
				break;
		}
	}
	
	public void keyReleased(KeyEvent event)
	{
		int key = event.getKeyCode();

		if (key == KeyEvent.VK_CONTROL) // CONTROL key
			vars.pressedControlKey = false;
		
		switch(key)
		{
			case 65:
				vars.pressedA = false;
				break;
			case 68:
				vars.pressedD = false;
				break;
			case 83:
				vars.pressedS = false;
				break;
			case 87:
				vars.pressedW = false;
				break;
			case KeyEvent.VK_SPACE:
				vars.pressedSpace = false;
				if (vars.redTank != null) {vars.redTank.setHasFired(false);}
				break;
				
			case KeyEvent.VK_UP:
				vars.pressedUp = false;
				break;
			case KeyEvent.VK_DOWN:
				vars.pressedDown = false;
				break;
			case KeyEvent.VK_LEFT:
				vars.pressedLeft = false;
				break;
			case KeyEvent.VK_RIGHT:
				vars.pressedRight = false;
				break;
			case KeyEvent.VK_NUMPAD0:
				vars.pressedZero = false;
				if (vars.greenTank != null) {vars.greenTank.setHasFired(false);}
				break;
				
			case 73:
				vars.pressedI = false;
				break;
			case 74:
				vars.pressedJ = false;
				break;
			case 75:
				vars.pressedK = false;
				break;
			case 76: 
				vars.pressedL = false;
				break;
			case 59:
				vars.pressedSemi = false;
				if (vars.orangeTank != null) {vars.orangeTank.setHasFired(false);}
				break;
				
			case KeyEvent.VK_NUMPAD4:
				vars.pressed4 = false;
				break;
			case KeyEvent.VK_NUMPAD2:
				vars.pressed2 = false;
				break;
			case KeyEvent.VK_NUMPAD5:
				vars.pressed5 = false;
				break;
			case KeyEvent.VK_NUMPAD8:
				vars.pressed8 = false;
			case KeyEvent.VK_ENTER:
				vars.pressedEnter = false;
				if (vars.blueTank != null) {vars.blueTank.setHasFired(false);}
				break;
			
			case 27:
				vars.paused = !vars.paused;
				break;
				
				
		}
	}
}