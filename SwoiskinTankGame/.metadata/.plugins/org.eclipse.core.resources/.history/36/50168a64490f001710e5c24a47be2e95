package TankGame;

import java.awt.*;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;

import javax.swing.*;

// This class, with a default (empty) constructor, creates a JPanel,
//  which is added to the JFrame in the 'Game' class, thereby enabling
//  a background Image (as opposed to just a single-color background)
//  to be placed under the graphics objects (shooter, aliens, missiles)
public class GamePanel extends JPanel implements GlobalConst
{
	private Font helvetica = new Font("Helvetica", Font.BOLD, 36);
	private FontMetrics metrics = this.getFontMetrics(helvetica);
	private AffineTransform redT = new AffineTransform();
	private AffineTransform greenT = new AffineTransform();

	// This method handles the painting/drawing of all Images for this
	//  program; the Images are drawn onto a JPanel, which is displayed
	//  on a JFrame; note that an Image is "removed" from the JPanel by
	//  simply not having it redrawn by this method
	public void paintComponent(Graphics g)
	{
		super.paintComponent(g);

		// This line causes graphics and text to be rendered with anti-aliasing
		//  turned on, making the overall display look smoother and cleaner
		((Graphics2D) g).setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

		// Draw the background for the JPanel
		
		// CHANGED TO WHITE TEMPORARILY (????)
		//g.drawImage(vars.backgroundImage, 0, 0, null);
		
		// Draw the shooter
		//g.drawImage(vars.shooterImage, vars.shooterX, vars.shooterY, this);
		
		//draw tanks
		//yay
		redT.setToTranslation(vars.redTank.x(), vars.redTank.y());
		redT.translate(vars.redTankImage.getWidth()/2, vars.redTankImage.getHeight()/2);
		redT.rotate(Math.toRadians(vars.redTank.direction()));
		redT.translate(-vars.redTankImage.getWidth()/2, -vars.redTankImage.getHeight()/2);
		
		greenT.setToTranslation(vars.greenTank.x(), vars.greenTank.y());
		greenT.translate(vars.greenTankImage.getWidth(null)/2, vars.greenTankImage.getHeight(null)/2);
		greenT.rotate(Math.toRadians(vars.greenTank.direction()));
		greenT.translate(-vars.greenTankImage.getWidth(null)/2, -vars.greenTankImage.getHeight(null)/2);
		
		Graphics2D g2d = (Graphics2D) g;
		
		g2d.drawImage(vars.redTankImage, redT, null);
		g2d.drawImage(vars.greenTankImage, greenT, null);
		/*
			g.drawOval((int)vars.redTankShape.UR().getX(), (int)vars.redTankShape.UR().getY(), 10, 10);
			g.drawOval((int)vars.redTankShape.UL().getX(), (int)vars.redTankShape.UL().getY(), 10, 10);
			g.drawOval((int)vars.redTankShape.DR().getX(), (int)vars.redTankShape.DR().getY(), 10, 10);
			g.drawOval((int)vars.redTankShape.DL().getX(), (int)vars.redTankShape.DL().getY(), 10, 10);

			g.drawOval((int)vars.greenTankShape.UR().getX(), (int)vars.greenTankShape.UR().getY(), 10, 10);
			g.drawOval((int)vars.greenTankShape.UL().getX(), (int)vars.greenTankShape.UL().getY(), 10, 10);
			g.drawOval((int)vars.greenTankShape.DR().getX(), (int)vars.greenTankShape.DR().getY(), 10, 10);
			g.drawOval((int)vars.greenTankShape.DL().getX(), (int)vars.greenTankShape.DL().getY(), 10, 10);
		*/
		
		//draw grid
//		for (int i=0;i<vars.fieldWidth;i+=40)
//		{
//			g.drawLine(0, i, vars.fieldWidth, i);
//		}
//		
//		for (int j=0;j<vars.fieldHeight;j+=40)
//		{
//			g.drawLine(j, 0, j, vars.fieldHeight);
//		}
		
		// Draw the bullets
		for (int i = 0; i< bullets.size(); i++)
		{
			Bullet bullet = bullets.get(i);
			g.drawImage(bullet.getImage(), (int)bullet.getX(), (int)bullet.getY(), this);
		}
		
		// Draw the powerups
		g.setColor(Color.BLUE);
		for (Powerup p : powerups)
		{
			g.fillRect(p.getX(), p.getY(), p.getWidth(), p.getHeight());
		}
		
		int y = 60;
		
		g.setColor(Color.RED);
		for (TankPower t : vars.redTank.getPowers())
		{
			y+=20;
			g.drawString(t.toString(), 20, y);
		}
		
		y = 60;
		g.setColor(Color.GREEN);
		for (TankPower t : vars.greenTank.getPowers())
		{
			y+=20;
			g.drawString(t.toString(), 500, y);
		}
		
		for (Wall wall:walls)
		{
			for (int i=0;i<wall.getNumHUnits();i++)
			{
				for (int j=0;j<wall.getNumVUnits();j++)
				{
					if (wall.getOrientation().equals("V"))
					{
						g.setColor(Color.RED);;
					}
					else if (wall.getOrientation().equals("H"))
					{
						g.setColor(Color.BLUE);
					}
					else if (wall.getOrientation().equals("C"))
					{
						g.setColor(Color.GREEN);
					}
					else
					{
						g.setColor(Color.BLACK);
					}
					
					WallUnit temp = wall.getUnit(i, j);
					g.drawImage(temp.getImage(), temp.getX(), temp.getY(), this);
					g.fillRect(wall.getX(), wall.getY(), wall.getWidth(), wall.getHeight());
					//g.drawOval(wall.getX(), wall.getY(), 10, 10);
				}
			}
			//g.drawRect(wall.getX(), wall.getY(), wall.getWidth(), wall.getHeight());
		}
		
		g.setFont(helvetica);
		
		g.setColor(Color.RED);
		g.drawString(Integer.toString(vars.redScore), 20, 44);

		g.setColor(Color.GREEN);
		g.drawString(Integer.toString(vars.greenScore), 560, 44);
		
		if (vars.winTextTime > 0)
		{
			if (vars.winner.equals("RED TANK"))
				g.setColor(Color.RED);
			else if (vars.winner.equals("GREEN TANK"))
				g.setColor(Color.GREEN);
			
			g.drawString(vars.winner + " WINS!", (getWidth() - metrics.stringWidth(vars.winner)) / 2, getHeight() / 2);
		}
		
		try	
		{
			g.setColor(Color.CYAN);
			g.drawLine((int)vars.redTank.shape().UR().getX(), (int)vars.redTank.shape().UR().getY(), (int)vars.redTank.shape().UL().getX(), (int)vars.redTank.shape().UL().getY());
			g.drawLine((int)vars.redTank.shape().UL().getX(), (int)vars.redTank.shape().UL().getY(), (int)vars.redTank.shape().DL().getX(), (int)vars.redTank.shape().DL().getY());
			g.drawLine((int)vars.redTank.shape().DL().getX(), (int)vars.redTank.shape().DL().getY(), (int)vars.redTank.shape().DR().getX(), (int)vars.redTank.shape().DR().getY());
			g.drawLine((int)vars.redTank.shape().DR().getX(), (int)vars.redTank.shape().DR().getY(), (int)vars.redTank.shape().UR().getX(), (int)vars.redTank.shape().UR().getY());
		
			g.setColor(Color.RED);
			g.drawLine((int)vars.tankTemp.UR().getX(), (int)vars.tankTemp.UR().getY(), (int)vars.tankTemp.UL().getX(), (int)vars.tankTemp.UL().getY());
			g.drawLine((int)vars.tankTemp.UL().getX(), (int)vars.tankTemp.UL().getY(), (int)vars.tankTemp.DL().getX(), (int)vars.tankTemp.DL().getY());
			g.drawLine((int)vars.tankTemp.DL().getX(), (int)vars.tankTemp.DL().getY(), (int)vars.tankTemp.DR().getX(), (int)vars.tankTemp.DR().getY());
			g.drawLine((int)vars.tankTemp.DR().getX(), (int)vars.tankTemp.DR().getY(), (int)vars.tankTemp.UR().getX(), (int)vars.tankTemp.UR().getY());
			
			
			//g.drawRect((int)vars.badWall.UL().getX(), (int)vars.badWall.UL().getY(), (int)vars.badWall.getWidth(), (int)vars.badWall.getHeight());
			
		} catch (Exception e)
		{
		}
		
		// If all of the aliens have been destroyed, display a "game over" message
//		
//		if (vars.gameOver)
//		{
//			String message = "Game Over!";
//			g.setColor(Color.YELLOW);
//			g.setFont(font);
//			g.drawString(message, (getWidth() - metrics.stringWidth(message)) / 2, getHeight() / 2);
//		}

		// This line synchronizes the graphics state by flushing buffers containing
		//  graphics events and forcing the frame drawing to happen now; otherwise,
		//  it can sometimes take a few extra milliseconds for the drawing to take
		//  place, which can result in jerky graphics movement; this line ensures
		//  that the display is up-to-date; it is useful for animation, since it
		//  reduces or eliminates flickering
		Toolkit.getDefaultToolkit().sync();
	}
	
	public Vector2D findCenter(myShape shape)
	{
		double minX, maxX, minY, maxY, cx, cy;
		
		minX = Math.min(shape.getVector2D(0).getX(), Math.min(shape.getVector2D(1).getX(), Math.min(shape.getVector2D(2).getX(), shape.getVector2D(3).getX())));
		maxX = Math.max(shape.getVector2D(0).getX(), Math.max(shape.getVector2D(1).getX(), Math.max(shape.getVector2D(2).getX(), shape.getVector2D(3).getX())));
		
		minY = Math.min(shape.getVector2D(0).getY(), Math.min(shape.getVector2D(1).getY(), Math.min(shape.getVector2D(2).getY(), shape.getVector2D(3).getY())));
		maxY = Math.max(shape.getVector2D(0).getY(), Math.max(shape.getVector2D(1).getY(), Math.max(shape.getVector2D(2).getY(), shape.getVector2D(3).getY())));
		
		cx = (minX + maxX)/2;
		cy = (minY + maxY)/2;
		
		return new Vector2D(cx, cy);
	}
	
}