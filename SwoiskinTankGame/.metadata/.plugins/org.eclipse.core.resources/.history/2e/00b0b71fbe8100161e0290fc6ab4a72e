package TankGame;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

public class Game extends KeyAdapter implements GlobalConst, ActionListener
{
	private JFrame gameFrame;
	private GamePanel battlePanel;
	private Timer timer;
	
	private boolean pressedLeft = false, pressedRight = false, pressedUp = false, pressedDown = false, 
						 pressedA = false, pressedD = false, pressedW = false, pressedS = false,
				       pressedSpace = false, pressedSlash = false,
				       redFired = false, greenFired = false,
				       paused = false;
	
	private boolean controlKeyPressed = false, missileFired = false;

	public static void main(String[] args)
	{
		new Game();
	}

	// Constructor
	public Game()
	{
		gameFrame = new JFrame();
		battlePanel = new GamePanel();
		gameFrame.getContentPane().add(battlePanel);

		gameFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		gameFrame.setSize(FIELD_WIDTH, FIELD_HEIGHT);
		gameFrame.setTitle("Tank Game");
		gameFrame.setLocationRelativeTo(null);
		gameFrame.setResizable(false);
		gameFrame.setFocusable(true);
		
		gameFrame.getContentPane().setBackground(Color.WHITE);

		// Set up before, changed to tanks
		//setUpShooter();
		//setUpAliens();
		
		setUpTanks();
		

		gameFrame.addKeyListener(this);
		gameFrame.setVisible(true);

		// Set (and start) a new Swing Timer to fire every 'TIMER_SPEED' milliseconds,
		//  after an initial delay of 'TIMER_DELAY' milliseconds; this Timer, along
		//  with the distance (number of pixels) that the aliens, missiles, and shooter
		//  move with each cycle, controls how fast the objects move on the playing
		//  field; note that if adding a "pause/unpause" feature to this game, the
		//  value of the 'TIMER_DELAY' constant should probably be set to zero
		timer = new Timer(TIMER_SPEED, this);
		timer.setInitialDelay(TIMER_DELAY);
		timer.start();
	}

	// Set the starting position of the player's shooter
	public void setUpShooter()
	{
		gameVar.shooterX = (FIELD_WIDTH / 2) - (gameVar.shooterImage.getWidth(null) / 2);
		gameVar.shooterY = FIELD_HEIGHT - gameVar.shooterImage.getHeight(null) - 30;
	}

	// Create and randomly place the appropriate number of aliens on the playing field
	public void setUpAliens()
	{
		// Determine the width and height of each alien being placed
		Alien tempAlien = new Alien(0, 0);
		int alienWidth = tempAlien.getWidth();
		int alienHeight = tempAlien.getHeight();

		for (int i = 0; i < NUM_ALIENS; i++)
		{
			// Set the starting positions of each of the aliens being placed
			int x = (int) (Math.random() * (FIELD_WIDTH - alienWidth - 7) + 1);
			int y = (int) (Math.random() * (FIELD_HEIGHT - alienHeight - 26 - gameVar.shooterImage.getHeight(null) - 60));

			// Create a new 'Alien' object and add it to the 'aliens' ArrayList 
			aliens.add(new Alien(x, y));
		}
	}
	
	public void setUpTanks()
	{
		gameVar.redTankX = 50;
		gameVar.redTankY = 50;
		gameVar.redDirection = 0;
		gameVar.greenTankX = FIELD_WIDTH - 50 - gameVar.greenTankImage.getWidth(null);
		gameVar.greenTankY = FIELD_HEIGHT - 50 - gameVar.greenTankImage.getHeight(null);
	}

	// This method will be called whenever the user presses a key; it is also
	//  called automatically whenever the Timer fires
	public void actionPerformed(ActionEvent e)
	{		
		if (paused)
			return;
		
		// all functions should pass/check "tank color"
		// move red tank
		if (pressedW)// && inBounds("red"))
		{
			moveTank("red", "w");
		}		
		if (pressedS)// && inBounds("red"))
		{
			moveTank("red", "s");				
		}
		if (pressedD)// && inBounds("red"))
		{
			moveTank("red", "d");
		}
		if (pressedA)// && inBounds("red"))
		{
			moveTank("red", "a");
		}
		if (pressedSpace && redFired == false && gameVar.redBulletsLeft > 0)
		{
			shoot("red");
			gameVar.redBulletsLeft--;
		}
		
		//move green tank
		if (pressedUp)
		{
			moveTank("green", "up");
		}
		if (pressedDown)
		{
			moveTank("green", "down");
		}
		if (pressedLeft)
		{
			moveTank("green", "left");
		}
		if (pressedRight)
		{
			moveTank("green", "right");
		}
		if (pressedSlash && greenFired == false && gameVar.greenBulletsLeft > 0)
		{
			shoot("green");
			gameVar.greenBulletsLeft--;
		}

		// If the player has pressed the space bar, launch a missile; the variable
		//  'missileFired' prevents the player from holding down the space bar to
		//  fire missiles continuously (by forcing the player to release the space
		//  bar between firings)
		if (pressedSpace && !missileFired)
		{
			// Determine the width and height of the missile being launched
			Missile tempMissile = new Missile(0, 0);
			int missileWidth = tempMissile.getWidth();
			int missileHeight = tempMissile.getHeight();

			// Set the starting position of the missile being launched 
			int x = gameVar.shooterX + (gameVar.shooterImage.getWidth(null) / 2) - (missileWidth / 2);
			int y = FIELD_HEIGHT - gameVar.shooterImage.getHeight(null) - 30 - missileHeight;

			// Create a new 'Missile' object and add it to the 'missiles' ArrayList 
			missiles.add(new Missile(x, y));

			missileFired = true;
		}

		// Redraw/Update the playing field
		battlePanel.repaint();
		checkCollisions();
	}

	public void moveTank(String t, String d)
	{
		if (t.equals("red"))
		{
			switch(d)
			{
				case "w":
					gameVar.redTankX += Math.cos(Math.toRadians(gameVar.redDirection)) * gameVar.tankSpeed;
					gameVar.redTankY += Math.sin(Math.toRadians(gameVar.redDirection)) * gameVar.tankSpeed;
					break;				
				case "s":
					gameVar.redTankX -= Math.cos(Math.toRadians(gameVar.redDirection)) * gameVar.tankSpeed;
					gameVar.redTankY -= Math.sin(Math.toRadians(gameVar.redDirection)) * gameVar.tankSpeed;
					break;
				case "a":
					gameVar.redDirection -= gameVar.directionIncrementer;
					break;
				case "d":
					gameVar.redDirection += gameVar.directionIncrementer;
					break;
			}
			if (gameVar.redDirection > 360)
				gameVar.redDirection = 0;
			if (gameVar.redDirection < 0)
				gameVar.redDirection = 360;
		}
		if (t.equals("green"))
		{
			switch(d)
			{
				case "up":
					gameVar.greenTankX += Math.cos(Math.toRadians(gameVar.greenDirection)) * gameVar.tankSpeed;
					gameVar.greenTankY += Math.sin(Math.toRadians(gameVar.greenDirection)) * gameVar.tankSpeed;
					break;				
				case "down":
					gameVar.greenTankX -= Math.cos(Math.toRadians(gameVar.greenDirection)) * gameVar.tankSpeed;
					gameVar.greenTankY -= Math.sin(Math.toRadians(gameVar.greenDirection)) * gameVar.tankSpeed;
					break;
				case "left":
					gameVar.greenDirection -= gameVar.directionIncrementer;
					break;
				case "right":
					gameVar.greenDirection += gameVar.directionIncrementer;
					break;
			}
			if (gameVar.greenDirection > 360)
				gameVar.greenDirection = 0;
			if (gameVar.greenDirection < 0)
				gameVar.greenDirection = 360;
		}
	}
	
	public void shoot(String t)
	{
		if (t.equals("red"))
		{
			int rcx = (int) gameVar.redTankX + (gameVar.redTankImage.getWidth()/2);
			int rcy = (int) gameVar.redTankY + (gameVar.redTankImage.getHeight()/2);
			
			bullets.add(new Bullet(rcx + Math.cos(Math.toRadians(gameVar.redDirection)) * (gameVar.redTankImage.getWidth()/2),
										  rcy + Math.sin(Math.toRadians(gameVar.redDirection)) * (gameVar.redTankImage.getWidth()/2), 
										  gameVar.redDirection, "red"));
			redFired = true;
		}
		if (t.equals("green"))
		{
			int gcx = (int) gameVar.greenTankX + (gameVar.greenTankImage.getWidth(null)/2);
			int gcy = (int) gameVar.greenTankY + (gameVar.greenTankImage.getHeight(null)/2);
			
			bullets.add(new Bullet(gcx + Math.cos(Math.toRadians(gameVar.greenDirection)) * (gameVar.greenTankImage.getWidth(null)/2),
										  gcy + Math.sin(Math.toRadians(gameVar.greenDirection)) * (gameVar.greenTankImage.getWidth(null)/2), 
										  gameVar.greenDirection, "green"));
			greenFired = true;
		}
	}
	
	public boolean inBounds(String which)
	{
		int buffer = 0;
		if (which.equals("red"))
		{
			//top right corner
			
		}
		
		if (which.equals("green"))
		{
			if (gameVar.greenTankX < FIELD_WIDTH - buffer && gameVar.greenTankX > buffer && gameVar.greenTankY < FIELD_HEIGHT - buffer && gameVar.greenTankY > buffer)
			{
				return true;
			}
			return false;
		}
		return false;
	}
	
	public boolean inBounds(int x, int y)
	{
		if (x < 0 || x > FIELD_WIDTH || y < 0 || y > FIELD_HEIGHT)
			return true;
		return false;
	}
	
	// For every alien and missile currently on the playing field, create a
	//  "rectangle" around both the alien and the missile, and then check to
	//  see if the two rectangles intersect each other
	
	public void checkCollisions()
	{
		findCorners();
		// The 'try-catch' exception trapping is needed to prevent an error from
		//  occurring when an element is removed from the 'aliens' and 'missiles'
		//  ArrayLists, causing the 'for' loops to end prematurely 
		for (int i = 0; i < aliens.size(); i++)
			for (int j = 0; j < missiles.size(); j++)
			{
				try
				{
					Rectangle rAlien = new Rectangle(aliens.get(i).getX(), aliens.get(i).getY(),
																aliens.get(i).getWidth(), aliens.get(i).getHeight());
					Rectangle rMissile = new Rectangle(missiles.get(j).getX(), missiles.get(j).getY(),
																  missiles.get(j).getWidth(), missiles.get(j).getHeight());

					// If an alien and a missile intersect each other, remove both
					//  of them from the playing field
					if (rAlien.intersects(rMissile))
					{
						aliens.remove(i);
						missiles.remove(j);
					}
				}
				catch (Exception error)
				{
				}
			}
		
		// If all of the aliens have been destroyed, the game is over, so stop
		//  the Timer and remove any remaining missiles from the playing field 
		/*
		if (aliens.size() == 0)
		{
			timer.stop();
			missiles.removeAll(missiles);
			gameVar.gameOver = true;
		}
		*/
	}
	
	public void findCorners()
	{
		//red
		double rcx = gameVar.redTankX + (gameVar.redTankImage.getWidth()/2);
		double rcy = gameVar.redTankY + (gameVar.redTankImage.getHeight()/2);
		
		double rx =  gameVar.redTankX;
		double ry =  gameVar.redTankY;
		double rw =  gameVar.redTankImage.getWidth();
		double rh =  gameVar.redTankImage.getHeight();
		double ra =  Math.toRadians(gameVar.redDirection);
		
		gameVar.rul = new Point(rx, ry);
		gameVar.rur = new Point(rx + rw, ry);
		gameVar.rdl = new Point(rx, ry + rh);
		gameVar.rdr = new Point(rx + rw, ry + rh);
		
		gameVar.redPoints.clear();
		
		gameVar.redPoints.add(gameVar.rul);
		gameVar.redPoints.add(gameVar.rur);
		gameVar.redPoints.add(gameVar.rdl);
		gameVar.redPoints.add(gameVar.rdr);
		
		for (int i = 0; i < gameVar.redPoints.size(); i++)
		{
			double tempX, tempY, newX, newY;
			Point point = gameVar.redPoints.get(i);
			
			tempX = point.getX() - rcx;
			tempY = point.getY() - rcy;
			
			newX = tempX*Math.cos(ra) - tempY*Math.sin(ra);
			newY = tempX*Math.sin(ra) + tempY*Math.cos(ra);
			
			point.setX(newX + rcx);
			point.setY(newY + rcy);
		}
		
		//green
		double gcx = gameVar.greenTankX + (gameVar.greenTankImage.getWidth(null)/2);
		double gcy = gameVar.greenTankY + (gameVar.greenTankImage.getHeight(null)/2);
		
		double gx =  gameVar.greenTankX;
		double gy =  gameVar.greenTankY;
		double gw =  gameVar.greenTankImage.getWidth(null);
		double gh =  gameVar.greenTankImage.getHeight(null);
		double ga =  Math.toRadians(gameVar.greenDirection);
		
		gameVar.gul = new Point(gx, gy);
		gameVar.gur = new Point(gx + gw, gy);
		gameVar.gdl = new Point(gx, gy + gh);
		gameVar.gdr = new Point(gx + gw, gy + gh);
		
		gameVar.greenPoints.clear();
		
		gameVar.greenPoints.add(gameVar.gul);
		gameVar.greenPoints.add(gameVar.gur);
		gameVar.greenPoints.add(gameVar.gdl);
		gameVar.greenPoints.add(gameVar.gdr);
		
		for (int i = 0; i < gameVar.greenPoints.size(); i++)
		{
			double tempX, tempY, newX, newY;
			Point point = gameVar.greenPoints.get(i);
			
			tempX = point.getX() - gcx;
			tempY = point.getY() - gcy;
			
			newX = tempX*Math.cos(ga) - tempY*Math.sin(ga);
			newY = tempX*Math.sin(ga) + tempY*Math.cos(ga);
			
			point.setX(newX + gcx);
			point.setY(newY + gcy);
		}
	}
	
	// See if the player has PRESSED a key
	public void keyPressed(KeyEvent event)
	{
		//65: a
		//68: d
		//83: s
		//87: w
		
		//47: fslash
		
		int key = event.getKeyCode();

		if (key == KeyEvent.VK_CONTROL) // CONTROL key
			controlKeyPressed = true;

		if ((key == 88) && (controlKeyPressed)) // CONTROL + X
		{
			gameFrame.dispose();
			System.exit(0);
		}
		
		//red controls wasd, green arrows
		
		switch(key)
		{
			case 65:
				pressedA = true;
				break;
			case 68:
				pressedD = true;
				break;
			case 83:
				pressedS = true;
				break;
			case 87:
				pressedW = true;
				break;
			case KeyEvent.VK_UP:
				pressedUp = true;
				break;
			case KeyEvent.VK_DOWN:
				pressedDown = true;
				break;
			case KeyEvent.VK_LEFT:
				pressedLeft = true;
				break;
			case KeyEvent.VK_RIGHT:
				pressedRight = true;
				break;
			case KeyEvent.VK_SPACE:
				pressedSpace = true;
				break;
			case 47:
				pressedSlash = true;
				break;
		}
	}

	// See if the player has RELEASED a key
	public void keyReleased(KeyEvent event)
	{
		int key = event.getKeyCode();

		if (key == KeyEvent.VK_CONTROL) // CONTROL key
			controlKeyPressed = false;
		
		switch(key)
		{
			case 65:
				pressedA = false;
				break;
			case 68:
				pressedD = false;
				break;
			case 83:
				pressedS = false;
				break;
			case 87:
				pressedW = false;
				break;
			case KeyEvent.VK_UP:
				pressedUp = false;
				break;
			case KeyEvent.VK_DOWN:
				pressedDown = false;
				break;
			case KeyEvent.VK_LEFT:
				pressedLeft = false;
				break;
			case KeyEvent.VK_RIGHT:
				pressedRight = false;
				break;
			case KeyEvent.VK_SPACE:
				pressedSpace = false;
				redFired = false;
			case 47:
				pressedSlash = false;
				greenFired = false;
				break;
			case 27:
				paused = !paused;
				break;
		}
	}
}