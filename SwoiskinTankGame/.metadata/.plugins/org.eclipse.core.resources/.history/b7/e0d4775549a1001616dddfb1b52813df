package shortestPath;

import java.util.ArrayList;

public class MyMatrix
{
	private static int[][] list;
	private static ArrayList<Path> usedPaths;
	private static int[] starts;
	private static String[] cityNames;
	
	public MyMatrix()
	{	
	}
	
	public static void CLalgo()
	{
		ArrayList<Integer> test = new ArrayList<Integer>();
		
		for (int m=0;m<list.length;m++)
		{
			//current i/j of shortest link
			int ci = -1, cj = -1;
			
			//current shortest path
			int currentShortest = Integer.MAX_VALUE;
			
			//loop through and find shortest link that's not already used
			for (int i=0;i<list.length;i++)
			{
				for (int j=0;j<list.length;j++)
				{
					if (list[i][j] < currentShortest && arrayContains(usedPaths, i) < 2 && arrayContains(usedPaths, j) < 2 && i!=j)
					{
						ci = i;
						cj = j;
						currentShortest = list[i][j];
					}
				}
			}
			
			usedPaths.add(new Path(ci, cj, currentShortest));		
		}
	}
	
	// A -d-> B -d-> C -d-> ... -d-> N
	public void printShortestCL()
	{
		String output = "Shortest Path: ";
		for (int i=0;i<cityNames.length-1;i++)
		{
			output += cityNames[i] + " --" + list[starts[i]][starts[i+1]] + "-> ";
		}
		
		System.out.println(output);
	}
	
	// Initializes map
	public static void populate()
	{
		cityNames = new String[]{"A", "B", "C", "D", "E"};
		starts = new int[cityNames.length];
		list = new int[cityNames.length][cityNames.length];
		usedPaths = new ArrayList<Path>();
		
		for (int i=0;i<list.length;i++)
		{
			for (int j=0;j<list.length;j++)
			{
				list[i][j] = -1;
			}
		}
		
		list[0][1] = 500;
		list[0][2] = 200;
		list[0][3] = 185;
		list[0][4] = 205;
		
		list[1][2] = 305;
		list[1][3] = 360;
		list[1][4] = 340;
		
		list[2][3] = 320;
		list[2][4] = 165;
		
		list[3][4] = 302;
		
		for (int i=0;i<list.length;i++)
		{
			for (int j=0;j<list.length;j++)
			{
				list[j][i] = list[i][j];
			}
		}
	}
	
	private static int getDistance(String name1, String name2)
	{
		int spot1 = -1, spot2 = -1, distance = -1;
		
		for (int i=0;i<cityNames.length;i++)
		{
			if (cityNames[i].equals(name1))
			{
				spot1 = i;
			}
			else if (cityNames[i].equals(name2))
			{
				spot2 = i;
			}
		}
		
		if (spot1 > -1 && spot2 > -1)
		{
			distance = list[spot1][spot2];
		}
		
		return distance;
	}
	
	// returns # of times "index" appears in "daList"
	private static int arrayContains(ArrayList<Path> daList, int index)
	{
		int instances = 0;
		for (int i=0;i<daList.size();i++)
		{
			if (daList.get(i).start() == index || daList.get(i).end() == index)
				instances++;
		}
		
		return instances;
	}
	
}
