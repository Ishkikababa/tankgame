package TankGame;

//disable under spawnPowerup()

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.lang.Math;
import java.util.ArrayList;
import java.util.ConcurrentModificationException;
import java.util.concurrent.TimeUnit;

public class Game extends KeyAdapter implements GlobalConst, ActionListener
{
	private JFrame gameFrame;
	private GamePanel battlePanel;
	private Timer timer;
	
	private boolean pressedLeft = false, pressedRight = false, pressedUp = false, pressedDown = false, 
						 pressedA = false, pressedD = false, pressedW = false, pressedS = false,
						 pressedSpace = false, pressedZero = false,
				       redFired = false, greenFired = false,
				       paused = false;
	
	private boolean controlKeyPressed = false;

	public static void main(String[] args)
	{
		new Game();
	}

	// Constructor
	public Game()
	{
		gameFrame = new JFrame();
		battlePanel = new GamePanel();
		gameFrame.getContentPane().add(battlePanel);

		gameFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		gameFrame.setSize(FIELD_WIDTH + 16, FIELD_HEIGHT + 16); // 16 for weird jframe buffer
		gameFrame.setTitle("Tank Game");
		gameFrame.setLocationRelativeTo(null);
		gameFrame.setResizable(false);
		gameFrame.setFocusable(true);
		
		gameFrame.getContentPane().setBackground(Color.WHITE);

		// Set up before, changed to tanks
		//setUpShooter();
		//setUpAliens();
		
		reset();
		gameVar.redScore = gameVar.greenScore = 0;
		
		gameFrame.addKeyListener(this);
		gameFrame.setVisible(true);

		// Set (and start) a new Swing Timer to fire every 'TIMER_SPEED' milliseconds,
		//  after an initial delay of 'TIMER_DELAY' milliseconds; this Timer, along
		//  with the distance (number of pixels) that the aliens, missiles, and shooter
		//  move with each cycle, controls how fast the objects move on the playing
		//  field; note that if adding a "pause/unpause" feature to this game, the
		//  value of the 'TIMER_DELAY' constant should probably be set to zero
		timer = new Timer(TIMER_SPEED, this);
		timer.setInitialDelay(TIMER_DELAY);
		timer.start();
	}

	public void reset()
	{
		setUpTanks();
		makeMaze();
		resetNumbers();
		resetPowerups();
	}
	
	// http://weblog.jamisbuck.org/2011/1/3/maze-generation-kruskal-s-algorithm
	public void makeMaze()
	{
		walls.clear();
		ArrayList<Wall> tempWalls = new ArrayList<Wall>();
				
		int w = FIELD_WIDTH/NODE_LENGTH;
		int h = FIELD_HEIGHT/NODE_LENGTH;
		int[][] nodes = new int[w][h];
		
		boolean[][] vwalls = new boolean[w][h];
		boolean[][] hwalls = new boolean[w][h];
		
		int index = 0;
		for (int i=0;i<w;i++)
		{
			for (int j=0;j<h;j++)
			{
				//make a temp wall everywhere in between nodes in an array
				vwalls[i][j] = true;
				hwalls[i][j] = true;
				nodes[i][j] = index;
				index++;
			}
		}
		
		while(!mazeDone(nodes))
		{
			int rx = (int)(Math.random()*(w));
			int ry = (int)(Math.random()*(h));
			int rd = (int)(Math.random()*4); // random direction (n,s,e,w) to compare to

			try
			{
				int a = nodes[rx][ry], b = -1;
				switch(rd)
				{
					case 0:
						b = nodes[rx][ry + 1];
						break;
					case 1:
						b = nodes[rx][ry - 1];
						break;
					case 2:
						b = nodes[rx + 1][ry];
						break;
					case 3:
						b = nodes[rx - 1][ry];
						break;
				}
				
				if (a != b)
				{
					
					if (rd == 0)
						hwalls[rx][ry+1] = false;					
					if (rd == 1)
						hwalls[rx][ry] = false;					
					if (rd == 2)
						vwalls[rx+1][ry] = false;					
					if (rd == 3)
						vwalls[rx][ry] = false;
					
					updateBags(nodes, a, b);
				}
				
			}
			catch(Exception e)
			{}
		}
		
		//randomly remove t walls to prevent choke points
		int r = (w + h) / 2;
		while (r > 0)
		{
			int rx = (int)(Math.random()*(w));
			int ry = (int)(Math.random()*(h));
			
			if (vwalls[rx][ry])
			{
				vwalls[rx][ry] = false;
				hwalls[rx][ry] = false;
				r--;
			}
		}
		
		// add temp walls to real walls
		for (int i=0;i<w;i++)
		{
			for (int j=0;j<h;j++)
			{
				if (vwalls[i][j])
					tempWalls.add(new Wall(i*NODE_LENGTH, j*NODE_LENGTH, 10, NODE_LENGTH + 10));
				if (hwalls[i][j])
					tempWalls.add(new Wall(i*NODE_LENGTH, j*NODE_LENGTH, NODE_LENGTH + 10, 10));
			}
		}
		
		//makes corners
		for (Wall t : tempWalls)
		{
			if (t.getOrientation().equals("V"))
			{
				walls.add(new Wall(t.getX(), t.getY(), t.getWidth(), 10));
				walls.add(new Wall(t.getX(), t.getY() + 10, t.getWidth(), t.getHeight()-10));
				walls.add(new Wall(t.getX(), t.getY() + t.getHeight() - 10, t.getWidth(), 10));
			}
			if (t.getOrientation().equals("H"))
			{
				walls.add(new Wall(t.getX(), t.getY(), 10, t.getHeight()));
				walls.add(new Wall(t.getX() + 10, t.getY(), t.getWidth() - 10, t.getHeight()));
				walls.add(new Wall(t.getX() + t.getWidth() - 10, t.getY(), 10, t.getHeight()));
			}
		}
		
		// border
		walls.add(new Wall(0, 0, FIELD_WIDTH, 10));
		walls.add(new Wall(0, 0, 10, FIELD_HEIGHT));
		walls.add(new Wall(0, FIELD_HEIGHT - 18, FIELD_WIDTH, 10));
		walls.add(new Wall(FIELD_WIDTH, 0, 10, FIELD_HEIGHT));
	}
	
	public void updateBags(int[][] n, int old, int nw)
	{		
		for (int i=0;i<n.length;i++)
			for (int j=0;j<n[0].length;j++)
				if (n[i][j] == old)
					n[i][j] = nw;
	}
	
	public boolean mazeDone(int[][] n)
	{
		for (int i=0;i<n.length-1;i++)
			for (int j=0;j<n[0].length-1;j++)
				if (n[i][j] != n[i+1][j] ||
					 n[i][j] != n[i][j+1])
					return false;
		
		return true;
	}
	
	public void resetPowerups()
	{
		powerups.clear();
		gameVar.redPowerups.clear();
		gameVar.greenPowerups.clear();
		gameVar.powerupCooldown = gameVar.powerupSpawnRate;
	}
	
	public void resetNumbers()
	{
		//gameVar.redScore = gameVar.greenScore = 0;
		gameVar.redBulletsLeft = gameVar.greenBulletsLeft = 5;
		gameVar.redDirection = 0;
		gameVar.greenDirection = 180;
		bullets.clear();
		gameVar.redPowerups.clear();
		gameVar.redMM = false;
		gameVar.redInvuln = false;
		gameVar.redSpeedModifier = 1;
		
		gameVar.greenPowerups.clear();
		gameVar.greenMM = false;
		gameVar.greenInvuln = false;
		gameVar.greenSpeedModifier = 1;
	}
	
	public void setUpTanks()
	{
		gameVar.redTankX = (int) (Math.random()*(FIELD_WIDTH/NODE_LENGTH -1)) * NODE_LENGTH + gameVar.redTankImage.getWidth()*1.5;
		gameVar.redTankY = (int) (Math.random()*(FIELD_HEIGHT/NODE_LENGTH -1)) * NODE_LENGTH  + gameVar.redTankImage.getHeight()*2;
		gameVar.greenTankX = (int) (Math.random()*(FIELD_WIDTH/NODE_LENGTH -1)) * NODE_LENGTH  + gameVar.greenTankImage.getWidth(null)*1.5;
		gameVar.greenTankY = (int) (Math.random()*(FIELD_HEIGHT/NODE_LENGTH -1)) * NODE_LENGTH  + gameVar.greenTankImage.getHeight(null)*2;
	}

	public void actionPerformed(ActionEvent e)
	{
		if (paused)
			return;
		
		if (gameVar.winTextTime > 0)
		{
			gameVar.winTextTime--;
			if (gameVar.winTextTime < 1)
				reset();
			return;
		}
		
		battlePanel.repaint();
		//end game?
		
		checkTankMovement();
		
		if (pressedSpace && redFired == false)
		{
			if (gameVar.redMM || gameVar.redBulletsLeft > 0)
			{
				shoot("red");
				if (!gameVar.redMM)
					gameVar.redBulletsLeft--;
			}
		}
		if (pressedZero && greenFired == false && gameVar.greenBulletsLeft > 0)
		{
			if (gameVar.greenMM || gameVar.greenBulletsLeft > 0)
			{
				shoot("green");
				if (!gameVar.greenMM)
					gameVar.greenBulletsLeft--;
			}
		}
		
		moveBullets();
		
		// Redraw/Update the playing field
		battlePanel.repaint();
		checkCollisions();
		checkPowerups();
	}
	
	public void checkPowerups()
	{
		if (gameVar.powerupCooldown > 0)
		{
			gameVar.powerupCooldown--;
			if (gameVar.powerupCooldown < 1)
			{
				gameVar.powerupCooldown = gameVar.powerupSpawnRate;
				spawnPowerup();
			}
		}
		
		try
		{
			for (int i=gameVar.redPowerups.size()-1;i>=0;i--)
			{
				tankPower t = gameVar.redPowerups.get(i);
				if (t.getTimeRemaining() > 0)
				{
					t.tickDown(1);
					if (t.getTimeRemaining() < 1)
					{
						gameVar.redPowerups.remove(t);
					}
				}
				else
				{
					gameVar.redPowerups.remove(t);
				}
				
				if (tankHasPowerup("red", "speed"))
				{
					gameVar.redSpeedModifier = 2;
				}
				else
				{
					gameVar.redSpeedModifier = 1;
				}
				
				if (tankHasPowerup("red", "invuln"))
				{
					gameVar.redInvuln = true;
				}
				else
				{
					gameVar.redInvuln = false;
				}
				
				if (tankHasPowerup("red", "missile massacre"))
				{
					gameVar.redMM = true;
				}
				else
				{
					gameVar.redMM = false;
				}
			}
			
			for (int i=gameVar.greenPowerups.size()-1;i>=0;i--)
			{
				tankPower t = gameVar.greenPowerups.get(i);
				if (t.getTimeRemaining() > 0)
				{
					t.tickDown(1);
					if (t.getTimeRemaining() < 1)
					{
						gameVar.greenPowerups.remove(t);
					}
				}
				else
				{
					gameVar.greenPowerups.remove(t);
				}
				
				if (tankHasPowerup("green", "speed"))
				{
					gameVar.greenSpeedModifier = 2;
				}
				else
				{
					gameVar.greenSpeedModifier = 1;
				}
				
				if (tankHasPowerup("green", "invuln"))
				{
					gameVar.greenInvuln = true;
				}
				else
				{
					gameVar.greenInvuln = false;
				}
				
				if (tankHasPowerup("green", "missile massacre"))
				{
					gameVar.greenMM = true;
				}
				else
				{
					gameVar.greenMM = false;
				}
			}
			
		}
		catch(Error e)
		{
			System.out.println("oops ya dumbfuck");
		}
	}
	
	public boolean tankHasPowerup(String t, String p)
	{
		if (t.equals("red"))
		{
			for (tankPower tp : gameVar.redPowerups)
			{
				if (tp.getType().equals(p))
					return true;
			}
		}
		else if (t.equals("green"))
		{
			for (tankPower tp : gameVar.greenPowerups)
			{
				if (tp.getType().equals(p))
					return true;
			}
		}
		return false;
	}
	
	public void spawnPowerup()
	{
//		if (true)
//			return;
		Powerup temp;
		do
		{
			int x = (int)(Math.floor(Math.random() * FIELD_WIDTH/40)*40) + 15;
			int y = (int)(Math.floor(Math.random() * FIELD_HEIGHT/40)*40) + 15;
			
			temp = new Powerup(x,y);
			//do-while to not collide with walls or dudes 
		} while(collidesWithWalls(temp.getShape()) != null || shapeCollision(temp.getShape(), gameVar.redTankShape) ||
					shapeCollision(temp.getShape(), gameVar.greenTankShape) || collidesWithPowerups(temp.getShape()));
		powerups.add(temp);
	}
	
	public boolean collidesWithPowerups(myShape temp)
	{
		for (Powerup p : powerups)
		{
			if (shapeCollision(temp, p.getShape()))
			{
				return true;
			}
		}
		return false;
	}
	
	public void checkTankMovement()
	{
		// all functions should pass/check "tank color"
		// move red tank
		if (pressedW)// && inBounds("red"))
		{
			moveTank("red", "w", TANK_SPEED);
		}
		if (pressedS)// && inBounds("red"))
		{
			moveTank("red", "s", TANK_SPEED);				
		}
		if (pressedD)// && inBounds("red"))
		{
			moveTank("red", "d", TANK_SPEED);
		}
		if (pressedA)// && inBounds("red"))
		{
			moveTank("red", "a", TANK_SPEED);
		}
		
		//move green tank
		if (pressedUp)
		{
			moveTank("green", "up", TANK_SPEED);
		}
		if (pressedDown)
		{
			moveTank("green", "down", TANK_SPEED);
		}
		if (pressedLeft)
		{
			moveTank("green", "left", TANK_SPEED);
		}
		if (pressedRight)
		{
			moveTank("green", "right", TANK_SPEED);
		}
	}
	
	public void moveBullets()
	{
		for (int i = 0; i< bullets.size(); i++)
		{
			//System.out.println(bullets.size());
			Bullet bullet = bullets.get(i);
			if (bullet.isDead())
			{
				if (bullet.getOwner().equals("red"))
				{
					gameVar.redBulletsLeft++;
					if (gameVar.redBulletsLeft > 5)
						gameVar.redBulletsLeft = 5;
				}
				else if (bullet.getOwner().equals("green"))
				{
					gameVar.greenBulletsLeft++;
					if (gameVar.greenBulletsLeft > 5)
						gameVar.greenBulletsLeft = 5;
				}
				
				bullets.remove(i);
			}
			else
			{
				bullet.moveBullet();
			}
		}
	}
	
	public Wall collidesWithWalls(myShape shape)
	{
		gameVar.badWall = null;
		for (int i=0;i<walls.size();i++)
		{
			if (shapeCollision(walls.get(i).getShape(), shape))
			{
				gameVar.badWall = walls.get(i).getShape();
				return walls.get(i);
			}
		}
		return null;
		
		//		
		//return the walls colliding/null and CHECK IF IT IS NULL YOU kind and thoughtful dudebro
		//
	}
	
	public boolean moveShapeOk(myShape temp, String direction, Double cos, Double sin)
	{
		//try to move a shape and return whether it collided with sumtin';
		switch(direction)
		{
			case "f":
				for (int i=0;i<4;i++) {
					temp.getVector2D(i).setX(temp.getVector2D(i).getX() + cos);
					temp.getVector2D(i).setY(temp.getVector2D(i).getY() + sin);
				};
				break;
			case "b":
				for (int i=0;i<4;i++) {
					temp.getVector2D(i).setX(temp.getVector2D(i).getX() - cos);
					temp.getVector2D(i).setY(temp.getVector2D(i).getY() - sin);
				};
				break;
		}
		
		if (collidesWithWalls(temp) == null)
			return true;
		else
			return false;
	}	
	
	public boolean rotateShapeOk(myShape temp, String direction, Double angle)
	{
		//try to rotato potato a shape and return whether it collided with sumtin';
		switch(direction)
		{
			case "l":
				for (int i=0;i<4;i++)
				{
					//wtf divide by 180? 
					temp.getVector2D(i).setPoint(rotatePoint(temp.getVector2D(i), findCenter(temp), Math.toRadians(-angle)));
				}
				break;
			case "r":
				for (int i=0;i<4;i++)
				{
					temp.getVector2D(i).setPoint(rotatePoint(temp.getVector2D(i), findCenter(temp), Math.toRadians(angle)));
				}
				break;
		}
		
		if (collidesWithWalls(temp) == null)
			return true;
		else
			return false;
	}
	
	// I'm not sorry for the length of this method
	public void moveTank(String t, String d, double speed)
	{
		int buffer = 2;
		double angleBuffer = 1;
		myShape temp;
		Vector2D c;
		double smoothBounceSpeed = 1;
		
		if (t.equals("red"))
		{
			double rcos = Math.cos(Math.toRadians(gameVar.redDirection)) * speed * gameVar.redSpeedModifier;
			double rsin = Math.sin(Math.toRadians(gameVar.redDirection)) * speed * gameVar.redSpeedModifier;
			temp = new myShape(gameVar.rul, gameVar.rur, gameVar.rdr, gameVar.rdl);
			c = findCenter(temp);
			gameVar.tankTemp = temp;
			gameVar.tempCenter = c;
			double tempAngle = gameVar.redDirection/180 + DIRECTION_INCREMENTER + angleBuffer;
			
			switch(d)
			{
				case "w":
					if (moveShapeOk(temp, "f", rcos*buffer, rsin*buffer))
					// pass "rcos * buffer" as speed
					{
						gameVar.redTankX += rcos;
						gameVar.redTankY += rsin;
					}
					else
					{
						//moveShapeOk(temp, "b", rcos*buffer);
						try
						{
						if (0 < gameVar.redDirection && gameVar.redDirection < 90 ||
							 270 > gameVar.redDirection && gameVar.redDirection > 180)
						{
							if (collidesWithWalls(temp) != null && collidesWithWalls(temp).getOrientation().equals("H"))
							{////////////////////////////////////////////////////////	
								if (moveShapeOk(temp, "b", rcos*buffer, rsin*buffer))
									moveTank("red", "s", smoothBounceSpeed);
								if (rotateShapeOk(temp, "l", tempAngle))
									moveTank("red", "a", smoothBounceSpeed);
							}
							else if (collidesWithWalls(temp) != null && collidesWithWalls(temp).getOrientation().equals("V"))
							{
								if (moveShapeOk(temp, "b", rcos*buffer, rsin*buffer))
									moveTank("red", "s", smoothBounceSpeed);
								if (rotateShapeOk(temp, "r", tempAngle))
									moveTank("red", "d", smoothBounceSpeed);
							}
						}
						else if (gameVar.redDirection > 270 || 180 > gameVar.redDirection && gameVar.redDirection > 90)
						{
							if (collidesWithWalls(temp) != null && collidesWithWalls(temp).getOrientation().equals("H"))
							{
								if (moveShapeOk(temp, "b", rcos*buffer, rsin*buffer))
									moveTank("red", "s", smoothBounceSpeed);
								if (rotateShapeOk(temp, "r", tempAngle))
									moveTank("red", "d", smoothBounceSpeed);
							}
							else if (collidesWithWalls(temp) != null && collidesWithWalls(temp).getOrientation().equals("V"))
							{
								if (moveShapeOk(temp, "b", rcos*buffer, rsin*buffer))
									moveTank("red", "s", smoothBounceSpeed);
								if (rotateShapeOk(temp, "l", tempAngle))
									moveTank("red", "a", smoothBounceSpeed);
							}
						}
						}
						catch(Error e)
						{
							System.out.println("nope");
							while (collidesWithWalls(temp) != null)
							{
								for (int i=0;i<4;i++)
								{
									temp.getVector2D(i).setX(temp.getVector2D(i).getX() + rcos * buffer);
									temp.getVector2D(i).setY(temp.getVector2D(i).getY() + rsin * buffer);
								}
								gameVar.redTankX -= rcos;
								gameVar.redTankY -= rsin;
							}
						}
					}
					break; 
				case "s":
//					for (int i=0;i<4;i++) {
//						temp.getVector2D(i).setX(temp.getVector2D(i).getX() - rcos * buffer);
//						temp.getVector2D(i).setY(temp.getVector2D(i).getY() - rsin * buffer);
//					};
					// pass "rcos * buffer" as speed
					if (moveShapeOk(temp, "b", rcos*buffer, rsin*buffer))
					{
						gameVar.redTankX -= rcos;
						gameVar.redTankY -= rsin;
					}
					else if (collidesWithWalls(temp) != null)
					{
						try
						{
						if (0 + 1 < gameVar.redDirection && gameVar.redDirection < 90 - 1 ||
							 270  - 1 > gameVar.redDirection && gameVar.redDirection > 180 + 1)
						{
							if (collidesWithWalls(temp).getOrientation().equals("H"))
							{
								if (moveShapeOk(temp, "f", rcos*buffer, rsin*buffer))
									moveTank("red", "w", smoothBounceSpeed);
								if (rotateShapeOk(temp, "l", tempAngle))
									moveTank("red", "a", smoothBounceSpeed);
							}
							else if (collidesWithWalls(temp).getOrientation().equals("V"))
							{
								if (moveShapeOk(temp, "f", rcos*buffer, rsin*buffer))
									moveTank("red", "w", smoothBounceSpeed);
								if (rotateShapeOk(temp, "r", tempAngle))
									moveTank("red", "d", smoothBounceSpeed);
							}
						}
						else if (gameVar.redDirection > 270 + 1 || 180 + 1 > gameVar.redDirection && gameVar.redDirection > 90 + 1)
						{
							if (collidesWithWalls(temp).getOrientation().equals("H"))
							{
								if (moveShapeOk(temp, "f", rcos*buffer, rsin*buffer))
									moveTank("red", "w", smoothBounceSpeed);
								if (rotateShapeOk(temp, "r", tempAngle))
									moveTank("red", "d", smoothBounceSpeed);
							}
							else if (collidesWithWalls(temp).getOrientation().equals("V"))
							{
								if (moveShapeOk(temp, "f", rcos*buffer, rsin*buffer))
									moveTank("red", "w", smoothBounceSpeed);
								if (rotateShapeOk(temp, "l", tempAngle))
									moveTank("red", "a", smoothBounceSpeed);
							}
						}
						}
						catch(Error e)
						{
							System.out.println("nope");
							while(collidesWithWalls(temp) != null)
							{
								for (int i=0;i<4;i++) {
									temp.getVector2D(i).setX(temp.getVector2D(i).getX() - rcos * buffer);
									temp.getVector2D(i).setY(temp.getVector2D(i).getY() - rsin * buffer);
								};
								gameVar.redTankX += rcos;
								gameVar.redTankY += rsin;
							}
						}
					}
					break; 
				case "a":
					temp = new myShape(gameVar.rul, gameVar.rur, gameVar.rdr, gameVar.rdl);
					for (int i=0;i<4;i++)
					{
						temp.getVector2D(i).setPoint(rotatePoint(temp.getVector2D(i), findCenter(temp), Math.toRadians(-tempAngle)));
					}
					//replace
					if (collidesWithWalls(temp) == null)
					{
						gameVar.redDirection -= DIRECTION_INCREMENTER * Math.sqrt(gameVar.redSpeedModifier);
					}
					else
					{
						int corner = findClosestCorner(temp, collidesWithWalls(temp));
						String dr = collidesWithWalls(temp).getOrientation();
						
						//x accommodation
						int xacc = 0, yacc = 0;
						double tdr = gameVar.redDirection;
						
						System.out.println(corner + collidesWithWalls(temp).getOrientation());
						// not quite, works sometimes 
						if (dr.equals("H"))
						{
							if (0 <= tdr && tdr <= 180)
								yacc = -1;
							else
								yacc = 1;
							
							if (corner == 0 || corner == 3)
								yacc *= -1;
						}
						else if (dr.equals("V"))
						{
							if (90 <= tdr && tdr <= 270)
								xacc = 1;
							else
								xacc = -1;
							if (corner == 1 || corner == 1)
								xacc *= -1;
						}
						
						for (int i=0;i<4;i++)
						{
							temp.getVector2D(i).setPoint(new Vector2D(temp.getVector2D(i).getX() + smoothBounceSpeed*xacc, temp.getVector2D(i).getY() + smoothBounceSpeed*yacc));
						}
						if (collidesWithWalls(temp) == null)
						{

							// do some trig boyyyy
							// the tank x/y will translate to one of the corners, depending on which angle/wall/corner
							// ^^ not true usually; make a new point, translate, set x/y to it's x/y
							
							// doesn't quite work if the back corner collides with the wall
							if (dr.equals("V"))
								gameVar.redTankX += smoothBounceSpeed * xacc;
							else if (dr.equals("H"))
								gameVar.redTankY -= smoothBounceSpeed * yacc;
							
							gameVar.redDirection -= DIRECTION_INCREMENTER * Math.sqrt(gameVar.redSpeedModifier);
							//sqrt arbitrary
						}
					}
					break;
				case "d":
					temp = new myShape(gameVar.rul, gameVar.rur, gameVar.rdr, gameVar.rdl);
					for (int i=0;i<4;i++)
					{
						temp.getVector2D(i).setPoint(rotatePoint(temp.getVector2D(i), c, Math.toRadians(tempAngle)));
					}
					if (collidesWithWalls(temp) == null)
					{
						gameVar.redDirection += DIRECTION_INCREMENTER * Math.sqrt(gameVar.redSpeedModifier);
					}
					else
					{
//						int corner = findClosestCorner(temp, collidesWithWalls(temp));
//						String dr = collidesWithWalls(temp).getOrientation();
//						
//						//x accommodation
//						int xacc = 0, yacc = 0;
//						double tdr = gameVar.redDirection;
//						if (dr.equals("H"))
//						{
//							if (0 <= tdr && tdr <= 180)
//							{
//								yacc = -1;
//							}
//							else
//							{
//								yacc = 1;
//							}
//							
//							if (corner == 0 || corner == 3)
//							{
//								yacc *= -1;
//							}
//						}
//						else if (dr.equals("V"))
//						{
//							if (90 < tdr && tdr <= 270)
//							{
//								xacc = -1;
//							}
//							else
//							{
//								xacc = 1;
//							}
//							if (corner == 0 || corner == 3)
//							{
//								xacc *= -1;
//							}
//						}
//						
//						for (int i=0;i<4;i++)
//						{
//							temp.getVector2D(i).setPoint(new Vector2D(temp.getVector2D(i).getX() + smoothBounceSpeed*xacc, temp.getVector2D(i).getX() + smoothBounceSpeed*yacc));
//						}
//						if (collidesWithWalls(temp) == null)
//						{
//							// do some trig boyyyy
//							// the tank x/y will translate to one of the corners, depending on which angle/wall/corner
//							// ^^ not true usually; make a new point, translate, set x/y to it's x/y
//							// translate directly away from wall (!)
//							
//							// doesn't quite work if the back corner collides with the wall
//							if (dr.equals("V"))
//								gameVar.redTankX -= smoothBounceSpeed * xacc;
//							else if (dr.equals("H"))
//								gameVar.redTankY += smoothBounceSpeed * yacc;
//							
//							gameVar.redDirection += DIRECTION_INCREMENTER * Math.sqrt(gameVar.redSpeedModifier);
//							//sqrt arbitrary
//						}
					}
					break;
			}
			if (gameVar.redDirection > 360) gameVar.redDirection = 0;
			if (gameVar.redDirection < 0)	gameVar.redDirection = 360;
		}
		if (t.equals("green"))
		{
			double gcos = Math.cos(Math.toRadians(gameVar.greenDirection)) * speed * gameVar.greenSpeedModifier;
			double gsin = Math.sin(Math.toRadians(gameVar.greenDirection)) * speed * gameVar.greenSpeedModifier;
			temp = new myShape(gameVar.gul, gameVar.gur, gameVar.gdr, gameVar.gdl);
			c = findCenter(temp);
			double tempAngle = gameVar.greenDirection/180 + DIRECTION_INCREMENTER + angleBuffer;
			
			switch(d)
			{
				case "up":
					for (int i=0;i<4;i++) {
						temp.getVector2D(i).setX(temp.getVector2D(i).getX() + gcos * buffer);
						temp.getVector2D(i).setY(temp.getVector2D(i).getY() + gsin * buffer);
					};
					
					if (!shapeCollision(gameVar.redTankShape, temp) && collidesWithWalls(temp) == null)
					{
						gameVar.greenTankX += gcos;
						gameVar.greenTankY += gsin;
					}
					break; 
				case "down":
					for (int i=0;i<4;i++) {
						temp.getVector2D(i).setX(temp.getVector2D(i).getX() - gcos * buffer);
						temp.getVector2D(i).setY(temp.getVector2D(i).getY() - gsin * buffer);
					};
					
					if (!shapeCollision(gameVar.redTankShape, temp) && collidesWithWalls(temp) == null)
					{
						gameVar.greenTankX -= gcos;
						gameVar.greenTankY -= gsin;
					}
					break;
				case "left":
					for (int i=0;i<4;i++)
					{
						temp.getVector2D(i).setPoint(rotatePoint(temp.getVector2D(i), c, Math.toRadians(tempAngle)));
					}
					if (!shapeCollision(temp, gameVar.redTankShape) && collidesWithWalls(temp) == null)
					{
						gameVar.greenDirection -= DIRECTION_INCREMENTER * Math.sqrt(gameVar.greenSpeedModifier);
					}
					break;
				case "right":
					for (int i=0;i<4;i++)
					{
						temp.getVector2D(i).setPoint(rotatePoint(temp.getVector2D(i), c, Math.toRadians(tempAngle)));
					}
					if (!shapeCollision(temp, gameVar.redTankShape) && collidesWithWalls(temp) == null)
					{
						gameVar.greenDirection += DIRECTION_INCREMENTER * Math.sqrt(gameVar.greenSpeedModifier);
					}
			}
			if (gameVar.greenDirection > 360) gameVar.greenDirection = 0;
			if (gameVar.greenDirection < 0) gameVar.greenDirection = 360;
		}
	}
	
	public int findClosestCorner(myShape shape, Wall wall)
	{
		//return the corner of the first shape closest to the wall (second shape)
		for (int i=0;i<4;i++)
		{
			//check collisions MVCC style for each vertex;
			Vector2D temp = shape.getVector2D(i);
			if (wall.getX() < temp.getX() && temp.getX() < wall.getX() + wall.getWidth() &&
				 wall.getY() < temp.getY() && temp.getY() < wall.getY() + wall.getHeight())
			{
				return i;
			}
		}
		return -1;
	}
	
	public Vector2D findCenter(myShape shape)
	{
		double minX, maxX, minY, maxY, cx, cy;
		
		minX = Math.min(shape.getVector2D(0).getX(), Math.min(shape.getVector2D(1).getX(), Math.min(shape.getVector2D(2).getX(), shape.getVector2D(3).getX())));
		maxX = Math.max(shape.getVector2D(0).getX(), Math.max(shape.getVector2D(1).getX(), Math.max(shape.getVector2D(2).getX(), shape.getVector2D(3).getX())));
		
		minY = Math.min(shape.getVector2D(0).getY(), Math.min(shape.getVector2D(1).getY(), Math.min(shape.getVector2D(2).getY(), shape.getVector2D(3).getY())));
		maxY = Math.max(shape.getVector2D(0).getY(), Math.max(shape.getVector2D(1).getY(), Math.max(shape.getVector2D(2).getY(), shape.getVector2D(3).getY())));
		
		cx = (minX + maxX)/2;
		cy = (minY + maxY)/2;
		
		return new Vector2D(cx, cy);
	}
	
	public void shoot(String t)
	{
		double extra = 1.5;
		if (t.equals("red"))
		{
			int rcx = (int) gameVar.redTankX + (gameVar.redTankImage.getWidth()/2);
			int rcy = (int) gameVar.redTankY + (gameVar.redTankImage.getHeight()/2);
			
			bullets.add(new Bullet(rcx + Math.cos(Math.toRadians(gameVar.redDirection)) * (gameVar.redTankImage.getWidth()/2) * extra,
										  rcy + Math.sin(Math.toRadians(gameVar.redDirection)) * (gameVar.redTankImage.getWidth()/2) * extra, 
										  gameVar.redDirection, "red"));
//			System.out.println("y: " + (rcy + Math.sin(Math.toRadians(gameVar.redDirection)) * (gameVar.redTankImage.getWidth()/2)));
//			System.out.println("y2: " + bullets.get(0).getY());
			if (!gameVar.redMM)
				redFired = true;
		}	
		if (t.equals("green"))
		{
			int gcx = (int) gameVar.greenTankX + (gameVar.greenTankImage.getWidth(null)/2);
			int gcy = (int) gameVar.greenTankY + (gameVar.greenTankImage.getHeight(null)/2);
			
			bullets.add(new Bullet(gcx + Math.cos(Math.toRadians(gameVar.greenDirection)) * (gameVar.greenTankImage.getWidth(null)/2) * extra,
										  gcy + Math.sin(Math.toRadians(gameVar.greenDirection)) * (gameVar.greenTankImage.getWidth(null)/2) * extra, 
										  gameVar.greenDirection, "green"));
			if (!gameVar.greenMM)
				greenFired = true;
		}
	}

	public void checkCollisions()
	{
		findCorners();
		//shapeCollision();
	
		gameVar.redTankShape = new myShape(gameVar.rul, gameVar.rur, gameVar.rdr, gameVar.rdl);
		gameVar.greenTankShape = new myShape(gameVar.gul, gameVar.gur, gameVar.gdr, gameVar.gdl);
		
		for (int i=0;i<bullets.size();i++)
		{
			Bullet bullet = bullets.get(i);
			myShape bulletShape = bullet.getShape();
			
			if (shapeCollision(bulletShape, gameVar.redTankShape))
			{
				bullet.setDead(true);
				if (!tankHasPowerup("red", "invuln"))
				{
					gameVar.winner = "GREEN TANK";
					addPoint("GREEN");
				}
			}
			
			if (shapeCollision(bulletShape, gameVar.greenTankShape))
			{
				bullet.setDead(true);
				if (!tankHasPowerup("green", "invuln"))
				{
					gameVar.winner = "RED TANK";
					addPoint("RED");
				}
			}
			
			Wall tempWall = collidesWithWalls(bullet.getShape());
			if (tempWall != null)
			{
					bullet.bounce(tempWall.getOrientation());
			}
		}
		
		try
		{
			for (Powerup p : powerups)
			{
				if (shapeCollision(p.getShape(), gameVar.redTankShape))
				{
					gameVar.redPowerups.add(new tankPower(p.getType(), 800));
					powerups.remove(p);
				}
				if (shapeCollision(p.getShape(), gameVar.greenTankShape))
				{
					gameVar.greenPowerups.add(new tankPower(p.getType(), 800));
					powerups.remove(p);
				}
				
			}
		}
		catch(ConcurrentModificationException e)
		{
		}
	}
	
	public void addPoint(String winner)
	{
		switch(winner)
		{
			case "RED":
				gameVar.redScore++;
				break;
			case "GREEN":
				gameVar.greenScore++;
				break;
		}
		
		gameVar.winTextTime = 400;
	}
	
	public void findCorners()
	{
		//red
		double rcx = gameVar.redTankX + (gameVar.redTankImage.getWidth()/2);
		double rcy = gameVar.redTankY + (gameVar.redTankImage.getHeight()/2);
		
		double rx =  gameVar.redTankX;
		double ry =  gameVar.redTankY;
		double rw =  gameVar.redTankImage.getWidth();
		double rh =  gameVar.redTankImage.getHeight();
		double ra =  Math.toRadians(gameVar.redDirection);
		
		gameVar.rul = new Vector2D(rx, ry);
		gameVar.rur = new Vector2D(rx + rw, ry);
		gameVar.rdr = new Vector2D(rx + rw, ry + rh);
		gameVar.rdl = new Vector2D(rx, ry + rh);
		
		gameVar.redPoints.clear();
		
		gameVar.redPoints.add(gameVar.rul);
		gameVar.redPoints.add(gameVar.rur);
		gameVar.redPoints.add(gameVar.rdr);
		gameVar.redPoints.add(gameVar.rdl);
		
		Vector2D rcenter = new Vector2D(rcx, rcy);
		
		for (int i = 0; i < gameVar.redPoints.size(); i++)
		{
			//rotatePoint(gameVar.redPoints.get(i), rcenter, ra);
			gameVar.redPoints.get(i).setPoint(rotatePoint(gameVar.redPoints.get(i), rcenter, ra));
		}
		
		//green
		double gcx = gameVar.greenTankX + (gameVar.greenTankImage.getWidth(null)/2);
		double gcy = gameVar.greenTankY + (gameVar.greenTankImage.getHeight(null)/2);
		
		double gx =  gameVar.greenTankX;
		double gy =  gameVar.greenTankY;
		double gw =  gameVar.greenTankImage.getWidth(null);
		double gh =  gameVar.greenTankImage.getHeight(null);
		double ga =  Math.toRadians(gameVar.greenDirection);
		
		gameVar.gul = new Vector2D(gx, gy);
		gameVar.gur = new Vector2D(gx + gw, gy);
		gameVar.gdl = new Vector2D(gx, gy + gh);
		gameVar.gdr = new Vector2D(gx + gw, gy + gh);
		
		gameVar.greenPoints.clear();
		
		gameVar.greenPoints.add(gameVar.gul);
		gameVar.greenPoints.add(gameVar.gur);
		gameVar.greenPoints.add(gameVar.gdl);
		gameVar.greenPoints.add(gameVar.gdr);
		
		Vector2D gcenter = new Vector2D(gcx, gcy);
		
		for (int i = 0; i < gameVar.greenPoints.size(); i++)
		{
			gameVar.greenPoints.get(i).setPoint(rotatePoint(gameVar.greenPoints.get(i), gcenter, ga));
		}
	}
	
	public Vector2D rotatePoint(Vector2D point, Vector2D center, double angle)
	{
		double tempX, tempY, newX, newY;
		
		tempX = point.getX() - center.getX();
		tempY = point.getY() - center.getY();
		
		newX = tempX*Math.cos(angle) - tempY*Math.sin(angle);
		newY = tempX*Math.sin(angle) + tempY*Math.cos(angle);
		
		point.setX(newX + center.getX());
		point.setY(newY + center.getY());
		
		return new Vector2D(newX + center.getX(), newY + center.getY());
	}
	
	boolean shapeCollision(myShape a, myShape b)
	{
	    for (int x=0; x<2; x++)
	    {
	        myShape polygon = (x==0) ? a : b;
	       
	        for (int i1=0; i1<4; i1++)
	        {
	            int   i2 = (i1 + 1) % 4;
	            Vector2D p1 = polygon.getVector2D(i1);
	            Vector2D p2 = polygon.getVector2D(i2);
	           
	            Vector2D normal = new Vector2D(p2.getY() - p1.getY(), p1.getX() - p2.getX());
	           
	            double minA = Double.MAX_VALUE;
	            double maxA = Double.MIN_VALUE;
	           
	            for (int j = 0; j < 4; j++)
	            {
	            	Vector2D point = a.getVector2D(j);
	               double projected = normal.getX() * point.getX() + normal.getY() * point.getY();
	               
	               if (projected < minA)
	                   minA = projected;
	               if (projected > maxA)
	                   maxA = projected;
	            }
	           
	            double minB = Double.MAX_VALUE;
	            double maxB = Double.MIN_VALUE;
	           
	            for (int j = 0; j < 4; j++)
	            {
	            	Vector2D point = b.getVector2D(j);
	                double projected = normal.getX() * point.getX() + normal.getY() * point.getY();
	               
	                if (projected < minB)
	                    minB = projected;
	                if (projected > maxB)
	                    maxB = projected;
	            }
	           
	            if (maxA < minB || maxB < minA)
	                return false;
	        }
	    }
	   
	    return true;
	}
	
	public int rand(int l, int h)
	{
		//inclusive
		return (int)(Math.random()*((h+1)-l)) +l;
	}
	
	public void keyPressed(KeyEvent event)
	{
		//65: a
		//68: d
		//83: s
		//87: w
		
		//47: fZero
		
		int key = event.getKeyCode();

		if (key == KeyEvent.VK_CONTROL) // CONTROL key
			controlKeyPressed = true;

		if ((key == 88) && (controlKeyPressed)) // CONTROL + X
		{
			gameFrame.dispose();
			System.exit(0);
		}
		
		if ((key == 78) && (controlKeyPressed))
		{
			reset();
		}
		
		//red controls wasd, green arrows
		
		switch(key)
		{
			case 65:
				pressedA = true;
				break;
			case 68:
				pressedD = true;
				break;
			case 83:
				pressedS = true;
				break;
			case 87:
				pressedW = true;
				break;
			case KeyEvent.VK_UP:
				pressedUp = true;
				break;
			case KeyEvent.VK_DOWN:
				pressedDown = true;
				break;
			case KeyEvent.VK_LEFT:
				pressedLeft = true;
				break;
			case KeyEvent.VK_RIGHT:
				pressedRight = true;
				break;
			case KeyEvent.VK_SPACE:
				pressedSpace = true;
				break;
			case KeyEvent.VK_NUMPAD0:
				//47
				pressedZero = true;
				break;
		}
	}
	
	public void keyReleased(KeyEvent event)
	{
		int key = event.getKeyCode();

		if (key == KeyEvent.VK_CONTROL) // CONTROL key
			controlKeyPressed = false;
		
		switch(key)
		{
			case 65:
				pressedA = false;
				break;
			case 68:
				pressedD = false;
				break;
			case 83:
				pressedS = false;
				break;
			case 87:
				pressedW = false;
				break;
			case KeyEvent.VK_UP:
				pressedUp = false;
				break;
			case KeyEvent.VK_DOWN:
				pressedDown = false;
				break;
			case KeyEvent.VK_LEFT:
				pressedLeft = false;
				break;
			case KeyEvent.VK_RIGHT:
				pressedRight = false;
				break;
			case KeyEvent.VK_SPACE:
				pressedSpace = false;
				redFired = false;
			case KeyEvent.VK_NUMPAD0:
				pressedZero = false;
				greenFired = false;
				break;
			case 27:
				paused = !paused;
				break;
		}
	}
}