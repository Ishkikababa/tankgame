package shortestPath;

import java.util.ArrayList;

public class MyMatrix
{
	private static int[][] list;
	private static ArrayList<Path> usedPaths;

	private static int[] nodes;
	private static String[] cityNames;
	
	public MyMatrix()
	{	
	}
	
	public static void CLalgo()
	{
		for (int m=0;m<list.length;m++)
		{
			// test path
			Path tester = null;
			int currentShortest = Integer.MAX_VALUE;
			//loop through and find shortest link that's not already used
			for (int i=0;i<list.length;i++)
			{
				for (int j=0;j<list.length;j++)
				{
					//System.out.println(i + ", " + j);
					if (i!=j)
					{
						Path temp = new Path(i, j, list[i][j]);
						if (temp.distance() < currentShortest && !isUsed(temp) && isAvailable(temp))
						{
							//System.out.println(temp.distance() + " < " + currentShortest);
							tester = new Path(temp);
							currentShortest = tester.distance();
							//System.out.println((isUsed(temp)));
						}
					}
				}
			}
			
			usedPaths.add(tester);
		}
	}
	
	// 031-420
	//http://www.people.vcu.edu/~gasmerom/MAT131/cheaplink.html
	private static boolean isAvailable(Path path)
	{
		updateNodes();
		
		nodes[path.start()]++;
		nodes[path.end()]++;
		
		for (int i=0;i<nodes.length;i++)
		{
			System.out.print(nodes[i] + " ");
		}
		System.out.println();
		
		int o2 = 0;
		int o0 = 0;
		
		for (int i=0;i<nodes.length;i++)
		{
			if (nodes[i] == 2)
			{
				o2++;
			}
			
			if (nodes[i] == 0)
			{
				o0++;
			}
		}
		
		if (o2 + o0 == nodes.length)
		{
			return false;
		}
		
		for (int i=0;i<nodes.length;i++)
		{
			if (nodes[i] > 2)
			{
				return false;
			}
		}
		
		return true;
	}
	
	private static void updateNodes()
	{
		for (int i=0;i<cityNames.length;i++) 
		{
			nodes[i] = 0;
		}
		
		for (int i=0;i<usedPaths.size()-1;i++)
		{
			nodes[usedPaths.get(i).start()]++;
			nodes[usedPaths.get(i).end()]++;
		}
	}
	
	private static Path findLastPath()
	{
		updateNodes();
		int start = -1;
		int end = -1;
		
		for (int i=0;i<nodes.length;i++)
		{
			if (nodes[i] == 0)
			{
				start = i;
			}
			if (nodes[i] == 1)
			{
				end = i;
			}
		}
		
		return new Path(start, end, list[start][end]);
	}
	
	private static boolean isUsed(Path path)
	{
		for (int i=0;i<usedPaths.size();i++)
		{
			Path temp = usedPaths.get(i);
			if ((temp.start() == path.start() && temp.end() == path.end()) || 
				  temp.start() == path.end() && temp.end() == path.start())
			{
				return true;
			}
		}
		
		return false;
	}
	
	public void printShortestCL()
	{
		String output = "Shortest Path: ";
		for (int i=0;i<cityNames.length-1;i++)
		{
			//output += cityNames[i] + " --" + list[usedPaths.get(i).start()][usedPaths.get(i).end()] + "-> ";
			output += "(" + usedPaths.get(i).toString() + ") ";
		}
		
		updateNodes();
/*		for (int i=0;i<nodes.length;i++)
		{
			System.out.println(nodes[i]);
		}
*/
		
		Path last = findLastPath();
		output += "( " + last.toString() + ")";
		
		System.out.println(output);
	}
	
	// Initializes map
	public static void populate()
	{
		cityNames = new String[]{"A", "B", "C", "D", "E"};
		list = new int[cityNames.length][cityNames.length];
		nodes = new int[cityNames.length];
		usedPaths = new ArrayList<Path>();
		
		for (int i=0;i<list.length;i++)
		{
			for (int j=0;j<list.length;j++)
			{
				list[i][j] = -1;
			}
		}
		
		list[0][1] = 500;
		list[0][2] = 200;
		list[0][3] = 185;
		list[0][4] = 205;
		
		list[1][2] = 305;
		list[1][3] = 360;
		list[1][4] = 340;
		
		list[2][3] = 320;
		list[2][4] = 165;
		
		list[3][4] = 302;
		
		for (int i=0;i<list.length;i++)
		{
			for (int j=0;j<list.length;j++)
			{
				list[j][i] = list[i][j];
			}
		}
	}
	
	// returns # of times "index" appears in "daList"
	private static int arrayContains(ArrayList<Path> daList, int index)
	{
		int instances = 0;
		for (int i=0;i<daList.size();i++)
		{
			if (daList.get(i).start() == index || daList.get(i).end() == index)
				instances++;
		}
		
		return instances;
	}
	
}
