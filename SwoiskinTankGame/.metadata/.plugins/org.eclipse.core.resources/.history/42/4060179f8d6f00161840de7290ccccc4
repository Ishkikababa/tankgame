package TankGame;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

public class Game extends KeyAdapter implements GlobalConst, ActionListener
{
	private JFrame gameFrame;
	private GamePanel battlePanel;
	private Timer timer;

	int counter = 0;
	
	private boolean pressedLeft = false, pressedRight = false, pressedUp = false, pressedDown = false, 
						 pressedA = false, pressedD = false, pressedW = false, pressedS = false,
				       pressedSpace = false, pressedSlash = false;
	
	private boolean controlKeyPressed = false, missileFired = false;

	public static void main(String[] args)
	{
		new Game();
	}

	// Constructor
	public Game()
	{
		gameFrame = new JFrame();
		battlePanel = new GamePanel();
		gameFrame.getContentPane().add(battlePanel);

		gameFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		gameFrame.setSize(FIELD_WIDTH, FIELD_HEIGHT);
		gameFrame.setTitle("Tank Game");
		gameFrame.setLocationRelativeTo(null);
		gameFrame.setResizable(false);
		gameFrame.setFocusable(true);
		gameFrame.setBackground(Color.BLACK);

		// Set up before, changed to tanks
		//setUpShooter();
		//setUpAliens();
		
		setUpTanks();
		

		gameFrame.addKeyListener(this);
		gameFrame.setVisible(true);

		// Set (and start) a new Swing Timer to fire every 'TIMER_SPEED' milliseconds,
		//  after an initial delay of 'TIMER_DELAY' milliseconds; this Timer, along
		//  with the distance (number of pixels) that the aliens, missiles, and shooter
		//  move with each cycle, controls how fast the objects move on the playing
		//  field; note that if adding a "pause/unpause" feature to this game, the
		//  value of the 'TIMER_DELAY' constant should probably be set to zero
		timer = new Timer(TIMER_SPEED, this);
		timer.setInitialDelay(TIMER_DELAY);
		timer.start();
	}

	// Set the starting position of the player's shooter
	public void setUpShooter()
	{
		gameVar.shooterX = (FIELD_WIDTH / 2) - (gameVar.shooterImage.getWidth(null) / 2);
		gameVar.shooterY = FIELD_HEIGHT - gameVar.shooterImage.getHeight(null) - 30;
	}

	// Create and randomly place the appropriate number of aliens on the playing field
	public void setUpAliens()
	{
		// Determine the width and height of each alien being placed
		Alien tempAlien = new Alien(0, 0);
		int alienWidth = tempAlien.getWidth();
		int alienHeight = tempAlien.getHeight();

		for (int i = 0; i < NUM_ALIENS; i++)
		{
			// Set the starting positions of each of the aliens being placed
			int x = (int) (Math.random() * (FIELD_WIDTH - alienWidth - 7) + 1);
			int y = (int) (Math.random() * (FIELD_HEIGHT - alienHeight - 26 - gameVar.shooterImage.getHeight(null) - 60));

			// Create a new 'Alien' object and add it to the 'aliens' ArrayList 
			aliens.add(new Alien(x, y));
		}
	}
	
	public void setUpTanks()
	{
		gameVar.redTankX = 50;
		gameVar.redTankY = 50;
		gameVar.greenTankX = FIELD_WIDTH - 50 - gameVar.greenTankImage.getWidth(null);
		gameVar.greenTankY = FIELD_HEIGHT - 50 - gameVar.greenTankImage.getHeight(null);
	}

	// This method will be called whenever the user presses a key; it is also
	//  called automatically whenever the Timer fires
	public void actionPerformed(ActionEvent e)
	{		
		// Change the shooter's position if the player is pressing the left
		//  or right arrow keys
		if (pressedLeft && gameVar.shooterX > 4)
			gameVar.shooterX -= SHOOTER_SPEED;
		if (pressedRight && gameVar.shooterX < FIELD_WIDTH - gameVar.shooterImage.getWidth(null) - 6 - 4)
			gameVar.shooterX += SHOOTER_SPEED;
		
		//System.out.println("red in bounds");
		
		if (pressedW && inBounds("red tank"))
		{
			moveRedTank("w");
		}		
		if (pressedS && inBounds("red tank"))
		{
			moveRedTank("s");				
		}
		if (pressedD && inBounds("red tank"))
		{
			moveRedTank("d");
		}
		if (pressedA && inBounds("red tank"))
		{
			moveRedTank("a");
		}

		
		
		// Move the remaining aliens across the playing field
		for (int i = 0; i < aliens.size(); i++)
		{
			Alien alien = aliens.get(i);
			alien.moveAlien();
		}

		// Move the existing missiles up the playing field
		for (int i = 0; i < missiles.size(); i++)
		{
			Missile missile = missiles.get(i);
			missile.moveMissile();
		}

		// If the player has pressed the space bar, launch a missile; the variable
		//  'missileFired' prevents the player from holding down the space bar to
		//  fire missiles continuously (by forcing the player to release the space
		//  bar between firings)
		if (pressedSpace && !missileFired)
		{
			// Determine the width and height of the missile being launched
			Missile tempMissile = new Missile(0, 0);
			int missileWidth = tempMissile.getWidth();
			int missileHeight = tempMissile.getHeight();

			// Set the starting position of the missile being launched 
			int x = gameVar.shooterX + (gameVar.shooterImage.getWidth(null) / 2) - (missileWidth / 2);
			int y = FIELD_HEIGHT - gameVar.shooterImage.getHeight(null) - 30 - missileHeight;

			// Create a new 'Missile' object and add it to the 'missiles' ArrayList 
			missiles.add(new Missile(x, y));

			missileFired = true;
		}

		// Redraw/Update the playing field
		battlePanel.repaint();

		checkCollisions();
	}

	public void moveRedTank(String d)
	{
		switch(d)
		{
			case "w":
				gameVar.redTankX += Math.cos(gameVar.redDirection) * gameVar.tankSpeed;
				break;
			case "a":
				gameVar.redDirection += gameVar.directionIncrementer;
				break;
		}
	}
	
	public boolean inBounds(String which)
	{
		int buffer = 10;
		if (which.equals("red tank"))
		{
			if (gameVar.redTankX < FIELD_WIDTH - buffer && gameVar.redTankX > buffer && gameVar.redTankY < FIELD_HEIGHT - buffer && gameVar.redTankY > buffer)
			{
				return true;
			}
			return false;
		}
		
		if (which.equals("green tank"))
		{
			if (gameVar.greenTankX < FIELD_WIDTH - buffer && gameVar.greenTankX > buffer && gameVar.greenTankY < FIELD_HEIGHT - buffer && gameVar.greenTankY > buffer)
			{
				return true;
			}
			return false;
		}
		return false;
	}
	
	// For every alien and missile currently on the playing field, create a
	//  "rectangle" around both the alien and the missile, and then check to
	//  see if the two rectangles intersect each other
	public void checkCollisions()
	{
		// The 'try-catch' exception trapping is needed to prevent an error from
		//  occurring when an element is removed from the 'aliens' and 'missiles'
		//  ArrayLists, causing the 'for' loops to end prematurely 
		for (int i = 0; i < aliens.size(); i++)
			for (int j = 0; j < missiles.size(); j++)
			{
				try
				{
					Rectangle rAlien = new Rectangle(aliens.get(i).getX(), aliens.get(i).getY(),
																aliens.get(i).getWidth(), aliens.get(i).getHeight());
					Rectangle rMissile = new Rectangle(missiles.get(j).getX(), missiles.get(j).getY(),
																  missiles.get(j).getWidth(), missiles.get(j).getHeight());

					// If an alien and a missile intersect each other, remove both
					//  of them from the playing field
					if (rAlien.intersects(rMissile))
					{
						aliens.remove(i);
						missiles.remove(j);
					}
				}
				catch (Exception error)
				{
				}
			}

		// If all of the aliens have been destroyed, the game is over, so stop
		//  the Timer and remove any remaining missiles from the playing field 
		/*
		if (aliens.size() == 0)
		{
			timer.stop();
			missiles.removeAll(missiles);
			gameVar.gameOver = true;
		}
		*/
	}

	// See if the player has PRESSED a key
	public void keyPressed(KeyEvent event)
	{
		//65: a
		//68: d
		//83: s
		//87: w
		
		int key = event.getKeyCode();

		System.out.println(key);
		if (key == KeyEvent.VK_CONTROL) // CONTROL key
			controlKeyPressed = true;

		if ((key == 88) && (controlKeyPressed)) // CONTROL + X
		{
			gameFrame.dispose();
			System.exit(0);
		}
		
		//red controls wasd
		
		switch(key)
		{
			case 65:
				pressedA = true;
				break;
			case 68:
				pressedD = true;
				break;
			case 83:
				pressedS = true;
				break;
			case 87:
				pressedW = true;
				break;
			case KeyEvent.VK_UP:
				pressedUp = true;
				break;
			case KeyEvent.VK_DOWN:
				pressedDown = true;
				break;
		}
		

		if (key == KeyEvent.VK_LEFT) // LEFT arrow
			pressedLeft = true;
		if (key == KeyEvent.VK_RIGHT) // RIGHT arrow
			pressedRight = true;

		if (key == KeyEvent.VK_SPACE) // SPACE bar
			pressedSpace = true;
	}

	// See if the player has RELEASED a key
	public void keyReleased(KeyEvent event)
	{
		int key = event.getKeyCode();

		if (key == KeyEvent.VK_CONTROL) // CONTROL key
			controlKeyPressed = false;
		
		
		switch(key)
		{
			case 65:
				pressedA = false;
				break;
			case 68:
				pressedD = false;
				break;
			case 83:
				pressedS = false;
				break;
			case 87:
				pressedW = false;
				break;
			case KeyEvent.VK_UP:
				pressedUp = false;
				break;
			case KeyEvent.VK_DOWN:
				pressedDown = false;
				break;
		}
		
		
		if (key == KeyEvent.VK_LEFT) // LEFT arrow
			pressedLeft = false;
		if (key == KeyEvent.VK_RIGHT) // RIGHT arrow
			pressedRight = false;

		if (key == KeyEvent.VK_SPACE) // SPACE bar
		{
			pressedSpace = false;
			missileFired = false;
		}
	}
}